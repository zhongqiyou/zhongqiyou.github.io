{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://zhongqiyou.github.io","root":"/"},"pages":[{"title":"关于","date":"2020-04-18T16:59:07.884Z","updated":"2020-02-21T05:47:12.828Z","comments":false,"path":"about/index.html","permalink":"https://zhongqiyou.github.io/about/index.html","excerpt":"","text":"个人详细介绍本人姓名：钟启有 出生年月：1998-9-3 来自：广东-湛江 17年入学：正式踏入互联网方面知识 专业：计算机信息管理 必修课程：java ，android ，html，css ，javascript ， mysql ， php ， phonetoshop。 在校过程中考取： ps高级修图三级证书 、 网站制作高级三级证书 课程广泛，18年开始，方向性去学习有关于前端专业课程。在网上投简历，发现自己有很多不足之处。 然后自己在网上寻求学习知识，在学习路上，也得到了很多属于自己的学习方法。 比如：bilibili ， mdn ， jspang ，廖雪峰、阮一峰...一些手册、视频教 程、大神的博客都可以说是我所收获的一部分,还有一部分在我的右栏。自己 也有编写了作品：pc端《旧音乐》、移动端《万物商城》、微信小程序《自由风品台》。 爱好：篮球、音乐、转笔 生活愿望：和家人朋友旅行 事业愿望：全栈\\有自己的线上作品"},{"title":"书单","date":"2020-04-18T16:59:07.884Z","updated":"2019-12-28T13:31:51.008Z","comments":false,"path":"books/index.html","permalink":"https://zhongqiyou.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-04-18T16:59:07.884Z","updated":"2019-12-25T08:34:52.214Z","comments":false,"path":"categories/index.html","permalink":"https://zhongqiyou.github.io/categories/index.html","excerpt":"","text":"一级标题"},{"title":"友情链接","date":"2020-04-18T16:59:08.118Z","updated":"2019-12-24T07:52:51.661Z","comments":true,"path":"links/index.html","permalink":"https://zhongqiyou.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-04-18T16:59:08.118Z","updated":"2019-12-24T07:52:51.661Z","comments":false,"path":"repository/index.html","permalink":"https://zhongqiyou.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-04-18T16:59:08.118Z","updated":"2019-12-24T07:52:51.661Z","comments":false,"path":"tags/index.html","permalink":"https://zhongqiyou.github.io/tags/index.html","excerpt":"","text":""},{"title":"test","date":"2019-12-25T07:28:01.000Z","updated":"2019-12-25T07:28:01.416Z","comments":true,"path":"test/index.html","permalink":"https://zhongqiyou.github.io/test/index.html","excerpt":"","text":""}],"posts":[{"title":"1-3微信小程序云开发（云存储入门使用）(完结)","slug":"wechat-storage","date":"2020-05-25T03:13:08.978Z","updated":"2020-05-25T04:47:14.705Z","comments":true,"path":"2020/05/25/wechat-storage/","link":"","permalink":"https://zhongqiyou.github.io/2020/05/25/wechat-storage/","excerpt":"","text":"一、云存储（官方简介）云开发提供了一块存储空间，提供了上传文件到云端、带权限管理的云端下载能力，开发者可以在小程序端和云函数端通过 API 使用云存储功能。在小程序端可以分别调用 wx.cloud.uploadFile 和 wx.cloud.downloadFile 完成上传和下载云文件操作。 官方地址：https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/capabilities.html#%E5%AD%98%E5%82%A8 来谈谈云存储的作用虽然提供了数据库，但是数据库只能存一些文字（路径，评论，标题），但是我们有时候想上传一些媒体或者文件呢？云存储就是解决这些问题。我们常上传就是 图片，视屏，word，excel了。上传完成后它会生成一个线上地址返回给我们。 二、使用1、为了更简单的入门 ，这里不使用官方提供的云开发模板 1.1、我这里把不需要用到的文件进行了删除，最终文件结构展示查看大图 2、老规矩，要想使用云开发，第一步在app.js文件初始化我们的云环境。app.js文件 12345678App(&#123;&#x2F;&#x2F; 初始化云服务环境 onLaunch:function()&#123; wx.cloud.init(&#123; env: &#39;test-fph51&#39; &#125;) &#125;&#125;) 2.1、打开云开发 ，点击设置查看云环境ID。上面env键 对应的值为 云环境ID如有不懂，这里了解：https://zhongqiyou.github.io/2020/05/17/wechat-cloud/ 4.1、操作前 , 我把改动过的文件都展示出来:pages/index/index.wxml文件: 1234567891011121314151617&lt;view&gt;&lt;button type&#x3D;&quot;primary&quot; bindtap&#x3D;&quot;getImageSrc&quot;&gt;图片上传&lt;&#x2F;button&gt;&lt;text&gt;展示图片：&lt;&#x2F;text&gt;&lt;image src&#x3D;&quot;&#123;&#123;imageSrc&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt;&lt;&#x2F;view&gt;&lt;view&gt;&lt;button type&#x3D;&quot;primary&quot; bindtap&#x3D;&quot;getVideoSrc&quot;&gt;视屏上传&lt;&#x2F;button&gt;&lt;text&gt;展示视屏：&lt;&#x2F;text&gt;&lt;video src&#x3D;&quot;&#123;&#123;videoSrc&#125;&#125;&quot;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;view&gt;&lt;view&gt;&lt;button type&#x3D;&quot;primary&quot; bindtap&#x3D;&quot;getFileSrc&quot;&gt;文件（excel）上传&lt;&#x2F;button&gt;&lt;button type&#x3D;&quot;primary&quot; bindtap&#x3D;&quot;getDownloadOpen&quot;&gt;下载该上传文件并打开&lt;&#x2F;button&gt;&lt;&#x2F;view&gt; pages/index/index.wxss文件: 123button&#123; margin: 5px auto;&#125; pages/index/index.js文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112Page(&#123; data:&#123; imageSrc:&quot;&quot; , videoSrc:&quot;&quot; , fileSrc:&quot;&quot; &#125; , &#x2F;&#x2F; 上传图片并展示 getImageSrc()&#123; var _this &#x3D; this; &#x2F;&#x2F; 本地选择图片 wx.chooseImage(&#123; count: 1, sizeType: [&#39;original&#39;, &#39;compressed&#39;], sourceType: [&#39;album&#39;, &#39;camera&#39;], success(res) &#123; &#x2F;&#x2F; 文件后缀名处理 var src &#x3D; res.tempFilePaths[0]; var index &#x3D; src.lastIndexOf(&quot;.&quot;); var suffix &#x3D; src.slice(index , src.length); &#x2F;&#x2F; 图片上传 wx.cloud.uploadFile(&#123; cloudPath: Math.random() + suffix, &#x2F;&#x2F; 上传至云端的路径 filePath: res.tempFilePaths[0], &#x2F;&#x2F; 小程序临时文件路径 success: res &#x3D;&gt; &#123; &#x2F;&#x2F; 获取图片路径并赋值 _this.setData(&#123; imageSrc: res.fileID &#125;) &#125;, fail: console.error &#125;) &#125; &#125;) &#125; , &#x2F;&#x2F; 上传视屏并展示 getVideoSrc()&#123; var _this &#x3D; this; &#x2F;&#x2F; 本地选择s视屏 wx.chooseVideo(&#123; sourceType: [&#39;album&#39;, &#39;camera&#39;], maxDuration: 60, camera: &#39;back&#39;, success(res) &#123; &#x2F;&#x2F; 文件后缀名处理 var src &#x3D; res.tempFilePath; var index &#x3D; src.lastIndexOf(&quot;.&quot;); var suffix &#x3D; src.slice(index , src.length); &#x2F;&#x2F; 视屏上传 wx.cloud.uploadFile(&#123; cloudPath: Math.random() + suffix, &#x2F;&#x2F; 上传至云端的路径 filePath: src, &#x2F;&#x2F; 小程序临时文件路径 success: res &#x3D;&gt; &#123; &#x2F;&#x2F; 获取视屏路径并赋值 _this.setData(&#123; videoSrc: res.fileID &#125;) &#125;, fail: console.error &#125;) &#125; &#125;) &#125; , &#x2F;&#x2F; 上传文件word或excel getFileSrc()&#123; var _this &#x3D; this; &#x2F;&#x2F; 选择文件 wx.chooseMessageFile(&#123; count: 1, type: &#39;all&#39;, success(res) &#123; &#x2F;&#x2F; 文件后缀名处理 var src &#x3D; res.tempFiles[0].path; var index &#x3D; src.lastIndexOf(&quot;.&quot;); var suffix &#x3D; res.tempFiles[0].path.slice(index , src.length); &#x2F;&#x2F; 上传文件 wx.cloud.uploadFile(&#123; cloudPath: Math.random() + suffix, &#x2F;&#x2F; 上传至云端的路径 filePath: src, &#x2F;&#x2F; 小程序临时文件路径 success: res &#x3D;&gt; &#123; &#x2F;&#x2F; 获取视屏路径并赋值 _this.setData(&#123; fileSrc: res.fileID &#125;) &#125;, fail: console.error &#125;) &#125; &#125;) &#125; ,&#x2F;&#x2F; 下载文件并打开getDownloadOpen()&#123; var _this &#x3D; this; &#x2F;&#x2F; 下载文件 wx.cloud.downloadFile(&#123; fileID: _this.data.fileSrc, &#x2F;&#x2F; 文件 ID success: res &#x3D;&gt; &#123; &#x2F;&#x2F; 返回临时文件路径 console.log(res.tempFilePath) &#x2F;&#x2F; 打开文件 wx.openDocument(&#123; filePath: res.tempFilePath, success: function (result) &#123; console.log(&#39;打开文档成功&#39; , result) &#125; &#125;) &#125;, fail: console.error &#125;)&#125;&#125;) 官方地址源代码：选择本地图片文件：https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html选择本地视屏文件：https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseVideo.html选择本地文件：https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html文件（上传，下载，删除）：https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/storage/api.html打开文件：https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.openDocument.html 你从每一个上传函数里，都会看到以下代码： 123var src &#x3D; res.tempFiles[0].path;var index &#x3D; src.lastIndexOf(&quot;.&quot;);var suffix &#x3D; res.tempFiles[0].path.slice(index , src.length); 解析：这是为了智能的获取后缀名。因为有些文件后缀名个数不一，后缀名不一。比如图片,：.JPEG ， .JPG , .GIF , .PNG , .PDF , .SVG , 还有谷歌独特格式 .webp 你会发现我每次上传用随数作为路径 ， 如下： 1cloudPath: Math.random() + suffix, &#x2F;&#x2F; 上传至云端的路径 解释：还记得IE的缓存问题吗，如果通过ajax发送GET请求，那么IE浏览器认为同一个URL只用一个结果。这里类似，所以解决方法是：每次请求不同的地址 app.json文件： 12345678910111213&#123; &quot;pages&quot;:[ &quot;pages&#x2F;index&#x2F;index&quot; ], &quot;window&quot;:&#123; &quot;backgroundTextStyle&quot;:&quot;light&quot;, &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;, &quot;navigationBarTitleText&quot;: &quot;WeChat&quot;, &quot;navigationBarTextStyle&quot;:&quot;black&quot; &#125;, &quot;style&quot;: &quot;v2&quot;, &quot;sitemapLocation&quot;: &quot;sitemap.json&quot;&#125; 因为把原来的pages/log文件夹删除。所以这里也要把配置过的log路径移除 源代码：https://github.com/zhongqiyou/wechat-storage 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://zhongqiyou.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"云开发","slug":"云开发","permalink":"https://zhongqiyou.github.io/tags/%E4%BA%91%E5%BC%80%E5%8F%91/"}]},{"title":"1-2微信小程序云开发（云函数入门使用）","slug":"wechat-fun","date":"2020-05-24T03:50:59.346Z","updated":"2020-05-25T04:44:11.076Z","comments":true,"path":"2020/05/24/wechat-fun/","link":"","permalink":"https://zhongqiyou.github.io/2020/05/24/wechat-fun/","excerpt":"","text":"一、云函数（官方简介）云函数是一段运行在云端的代码，无需管理服务器，在开发工具内编写、一键上传部署即可运行后端代码。 小程序内提供了专门用于云函数调用的 API。开发者可以在云函数内使用 wx-server-sdk 提供的 getWXContext 方法获取到每次调用的上下文（appid、openid 等），无需维护复杂的鉴权机制，即可获取天然可信任的用户登录态（openid）。官方地址：https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/capabilities.html#%E4%BA%91%E5%87%BD%E6%95%B0 来谈谈云函数的作用1.云函数可以直接方便的拿到我们openid（解答疑问：“openid”相当于我们现实生活中的“身份证”）。要知道我们以前是怎么拿的openid，这里我就不多介绍了，看这里：https://jingyan.baidu.com/article/fdffd1f898a588f3e98ca1a7.html扯一扯：因为在页面操控，你的appid , 秘钥 ，code一些敏感信息会暴露,还有微信小程序上线时，也因这个审核不过。你需要自己搭建的后台。 2.操作数据库2.1、不受数据库权限影响查看大图意思就是：别人发布的东西你也可以操作。不受权限限制 2.2、获取数据库中的数据，突破20条。原来的数据库操作，只能最多获取20条。现在使用云函数，可以获取更多 还有一些微信支付：https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/wechatpay.html 二、使用1、为了更简单的入门 ，这里不使用官方提供的云开发模板 1.1、我这里把不需要用到的文件进行了删除，最终文件结构展示查看大图 在文件结构你会发现，多了一个functions | test 文件夹。先不要疑问，接着往下看… 2、要想使用云开发，第一步在app.js文件初始化我们的云环境 与 配置project.config.json文件。app.js文件 12345678App(&#123;&#x2F;&#x2F; 初始化云服务环境 onLaunch:function()&#123; wx.cloud.init(&#123; env: &#39;test-fph51&#39; &#125;) &#125;&#125;) 2.1、打开云开发 ，点击设置查看云环境ID。上面env键 对应的值为 云环境ID如有不懂，这里了解：https://zhongqiyou.github.io/2020/05/17/wechat-cloud/ 2.2、初始化云函数文件夹project.config.json文件 1&quot;cloudfunctionRoot&quot;: &quot;functions&#x2F;&quot; &#x2F;&#x2F;文件夹名称 //因为只是添加一行代码，所以就不全部编写了。看图：查看大图 看到这里就可以解释functions | test 文件夹：新建的文件夹（初始化一个装云函数的总文件夹）functions:就是在project.config.json文件配置的cloudfunctionRoot属性 , 后面的值就是代表文件夹名称test：后面跟着的就是，我们初始化的云开发环境名称注意：文件夹的icon必须带着云朵 ， funcions 后面也必须有 云环境显示（如果显示的是未定义。那就是没初始化成功） 3、在新创建的文件夹中创建云函数3.1新建Node.js 云函数 , 如图：查看大图 我这里新建了两个：1.getBreach , 2.getOpenId。每一个云函数文件夹都自动生成两个文件分别为：index.js , package.json 4.下面展示两个云函数4.1.获取openid操作getOpenId文件夹中index.js 123456789101112131415&#x2F;&#x2F; 云函数入口文件const cloud &#x3D; require(&#39;wx-server-sdk&#39;)cloud.init(&quot;test-fph51&quot;)&#x2F;&#x2F; 云函数入口函数exports.main &#x3D; async (event, context) &#x3D;&gt; &#123; const wxContext &#x3D; cloud.getWXContext(); return &#123; event , context , wxContext &#125;&#125; 4.2.突破20条数据操作getBreach文件夹中index.js 123456789101112131415161718192021222324const cloud &#x3D; require(&#39;wx-server-sdk&#39;)cloud.init(&quot;test-fph51&quot;)const db &#x3D; cloud.database()const MAX_LIMIT &#x3D; 100exports.main &#x3D; async (event, context) &#x3D;&gt; &#123; &#x2F;&#x2F; 先取出集合记录总数 const countResult &#x3D; await db.collection(&#39;list&#39;).count() const total &#x3D; countResult.total &#x2F;&#x2F; 计算需分几次取 const batchTimes &#x3D; Math.ceil(total &#x2F; 100) &#x2F;&#x2F; 承载所有读操作的 promise 的数组 const tasks &#x3D; [] for (let i &#x3D; 0; i &lt; batchTimes; i++) &#123; const promise &#x3D; db.collection(&#39;list&#39;).skip(i * MAX_LIMIT).limit(MAX_LIMIT).get() tasks.push(promise) &#125; &#x2F;&#x2F; 等待所有 return (await Promise.all(tasks)).reduce((acc, cur) &#x3D;&gt; &#123; return &#123; data: acc.data.concat(cur.data), errMsg: acc.errMsg &#125; &#125;)&#125; 突破20条官方地址：https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/read.html 云函数使用官方地址：https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/userinfo.html 注意：当你看完我的与官方的源码后，你会发现 , 我在我的源码再次初始化。如下(我只把我与官方的代码不同处展示出来，其他的不动)： 12345&#x2F;&#x2F;官方cloud.init()&#x2F;&#x2F;我的cloud.init(&quot;test-fph51&quot;) 我这样做的原因是，当我们有两个云开发环境的时候系统不知道我们想要初始化那一个环境，所以需要我们要再次初始化一次（此情况偶尔出现） 每次改动都要重新上传部署，如图：查看大图 4.1、操作前 , 我把改动过的文件都展示出来:pages/index/index.wxml文件: 12345&lt;view&gt;&lt;text&gt;云函数测试：&lt;&#x2F;text&gt;&lt;button type&#x3D;&quot;primary&quot; bindtap&#x3D;&quot;getOpenId&quot;&gt;获取openId&lt;&#x2F;button&gt;&lt;button type&#x3D;&quot;primary&quot; bindtap&#x3D;&quot;getBreach&quot;&gt;突破获取20条数据&lt;&#x2F;button&gt;&lt;&#x2F;view&gt; pages/index/index.wxss文件: 123button&#123; margin: 5px auto;&#125; pages/index/index.js文件： 123456789101112131415161718192021222324252627282930Page(&#123; &#x2F;&#x2F; 获取openId getOpenId()&#123; wx.cloud.callFunction(&#123; &#x2F;&#x2F; 云函数名称 name: &#39;getOpenId&#39;, &#x2F;&#x2F; 传给云函数的参数 data: &#123; title: &quot;测试数据&quot; &#125;, success: function (res) &#123; console.log(res) console.log(&quot;openId:&quot; + res.result.event.userInfo.openId) &#125;, fail: console.error &#125;) &#125; , &#x2F;&#x2F; 突破20条数据 getBreach()&#123; wx.cloud.callFunction(&#123; &#x2F;&#x2F; 云函数名称 name: &#39;getBreach&#39;, success: function (res) &#123; console.log(res) &#125;, fail: console.error &#125;) &#125;&#125;) app.json文件： 12345678910111213&#123; &quot;pages&quot;:[ &quot;pages&#x2F;index&#x2F;index&quot; ], &quot;window&quot;:&#123; &quot;backgroundTextStyle&quot;:&quot;light&quot;, &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;, &quot;navigationBarTitleText&quot;: &quot;WeChat&quot;, &quot;navigationBarTextStyle&quot;:&quot;black&quot; &#125;, &quot;style&quot;: &quot;v2&quot;, &quot;sitemapLocation&quot;: &quot;sitemap.json&quot;&#125; 因为把原来的pages/log文件夹删除。所以这里也要把配置过的log路径移除 源代码：https://github.com/zhongqiyou/wechar-fun 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://zhongqiyou.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"云开发","slug":"云开发","permalink":"https://zhongqiyou.github.io/tags/%E4%BA%91%E5%BC%80%E5%8F%91/"}]},{"title":"1-1微信小程序云开发（数据库入门使用）","slug":"wechat-db","date":"2020-05-18T06:39:33.949Z","updated":"2020-05-25T04:43:56.651Z","comments":true,"path":"2020/05/18/wechat-db/","link":"","permalink":"https://zhongqiyou.github.io/2020/05/18/wechat-db/","excerpt":"","text":"一、数据库（官方简介）云开发提供了一个 JSON 数据库，顾名思义，数据库中的每条记录都是一个 JSON 格式的对象。一个数据库可以有多个集合（相当于关系型数据中的表），集合可看做一个 JSON 数组，数组中的每个对象就是一条记录，记录的格式是 JSON 对象。官方地址：https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/capabilities.html#%E6%95%B0%E6%8D%AE%E5%BA%93 二、使用1、为了更简单的入门 ，这里不使用官方提供的云开发模板 1.1、我这里把不需要用到的文件进行了删除，最终文件结构展示查看大图 2、要想使用数据库，第一步初始化我们的云环境了。app.js文件 12345678App(&#123;&#x2F;&#x2F; 初始化云服务环境 onLaunch:function()&#123; wx.cloud.init(&#123; env: &#39;test-fph51&#39; &#125;) &#125;&#125;) 2.1、打开云开发 ，点击设置查看云环境ID。上面env键 对应的值为 云环境ID如有不懂，这里了解：https://zhongqiyou.github.io/2020/05/17/wechat-cloud/ 3.创建一个集合查看大图 3.1、打开云开发 ， 点击数据库 ， 填写集合名称。我这里创建的是list 4.集合的基本操作就是：增、删、改、查。与mysql中操作表的意思是一样的。4.1、操作前 , 我把改动过的文件都展示出来:pages/index/index.wxml文件: 12345678910&lt;view&gt;&lt;text&gt;云数据库测试:&lt;&#x2F;text&gt;&lt;input type&#x3D;&quot;text&quot; bindinput&#x3D;&quot;getId&quot; placeholder&#x3D;&quot;ID&quot;&gt;&lt;&#x2F;input&gt;&lt;input type&#x3D;&quot;text&quot; bindinput&#x3D;&quot;getName&quot; placeholder&#x3D;&quot;姓名&quot;&gt;&lt;&#x2F;input&gt;&lt;input type&#x3D;&quot;text&quot; bindinput&#x3D;&quot;getAge&quot; placeholder&#x3D;&quot;年龄&quot;&gt;&lt;&#x2F;input&gt;&lt;button bindtap&#x3D;&quot;insert&quot; type&#x3D;&quot;primary&quot;&gt;增加数据&lt;&#x2F;button&gt;&lt;button bindtap&#x3D;&quot;select&quot; type&#x3D;&quot;primary&quot;&gt;查询数据&lt;&#x2F;button&gt;&lt;button bindtap&#x3D;&quot;update&quot; type&#x3D;&quot;primary&quot;&gt;修改数据&lt;&#x2F;button&gt;&lt;button bindtap&#x3D;&quot;delete&quot; type&#x3D;&quot;primary&quot;&gt;删除数据&lt;&#x2F;button&gt;&lt;&#x2F;view&gt; pages/index/index.wxss文件: 12345678button&#123; margin: 5px auto;&#125;input[type&#x3D;text]&#123; width: 80%; margin: 5px auto; border: 1px solid #cccccc;&#125; pages/index/index.js文件： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798&#x2F;&#x2F; 声明要操作的数据集合const db &#x3D; wx.cloud.database().collection(&#39;list&#39;);Page(&#123; data:&#123; id:&quot;&quot; , name:&quot;&quot; , age:&quot;&quot; &#125; , &#x2F;&#x2F; 获取表单中的value值 getId(event)&#123; this.setData(&#123; id:event.detail.value &#125;) &#125; , getName(event)&#123; this.setData(&#123; name: event.detail.value &#125;) &#125; , getAge(event)&#123; this.setData(&#123; age: event.detail.value &#125;) &#125; ,&#x2F;&#x2F; 插入数据 insert()&#123; var _this &#x3D; this; db.add(&#123; &#x2F;&#x2F;参数 data: &#123; _id: _this.data.id, name: _this.data.name, age: _this.data.age &#125;, success: function (res) &#123; console.log(res); &#125; &#125;) &#125; , &#x2F;&#x2F; 查询数据 select() &#123; var _this &#x3D; this; &#x2F;&#x2F; 指定查询（一条） &#x2F;&#x2F; db.doc(_this.data.id).get(&#123; &#x2F;&#x2F; success: function (res) &#123; &#x2F;&#x2F; console.log(res) &#x2F;&#x2F; &#125; &#x2F;&#x2F; &#125;) &#x2F;&#x2F; 条件查询（一条或多条） &#x2F;&#x2F; db.where(&#123; &#x2F;&#x2F; name: _this.data.name , &#x2F;&#x2F; age: _this.data.age &#x2F;&#x2F; &#125;) &#x2F;&#x2F; .get(&#123; &#x2F;&#x2F; success: function (res) &#123; &#x2F;&#x2F; console.log(res) &#x2F;&#x2F; &#125; &#x2F;&#x2F; &#125;) &#x2F;&#x2F; 所有查询（全部） db.get(&#123; success: function (res) &#123; console.log(res.data) &#125; &#125;) &#125; ,&#x2F;&#x2F; 更新数据 update() &#123; var _this &#x3D; this; &#x2F;&#x2F;传入对应数据的id db.doc(_this.data.id).update(&#123; data: &#123; name: _this.data.name , age:_this.data.age &#125;, success: function (res) &#123; console.log(res) &#125; &#125;) &#125; , &#x2F;&#x2F; 删除数据 delete() &#123; var _this &#x3D; this; &#x2F;&#x2F;传入对应数据的id db.doc(_this.data.id).remove(&#123; success: function (res) &#123; console.log(res) &#125; &#125;) &#125;&#125;) 注意：1.添加时 ，集合中如果不传入”_id”字段，那么会自动生成。反之传入，会把该值保留为_id字段中的值。 2.获取时 ，上面提到三种：通过对应id获取一条。通过满足条件获取一条或多条，官方还提供一些额外命令（这里不做介绍）。最后是获取全部，但是最多只能获取20条。现要突破获取更多的，需要借助“云函数”来实现(后面篇介绍) app.json文件： 12345678910111213&#123; &quot;pages&quot;:[ &quot;pages&#x2F;index&#x2F;index&quot; ], &quot;window&quot;:&#123; &quot;backgroundTextStyle&quot;:&quot;light&quot;, &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;, &quot;navigationBarTitleText&quot;: &quot;WeChat&quot;, &quot;navigationBarTextStyle&quot;:&quot;black&quot; &#125;, &quot;style&quot;: &quot;v2&quot;, &quot;sitemapLocation&quot;: &quot;sitemap.json&quot;&#125; 因为把原来的pages/log文件夹删除。所以这里也要把配置过的log路径移除官方地址：https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/init.html 源代码：https://github.com/zhongqiyou/wechat-db 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://zhongqiyou.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"云开发","slug":"云开发","permalink":"https://zhongqiyou.github.io/tags/%E4%BA%91%E5%BC%80%E5%8F%91/"}]},{"title":"1-0微信小程序云开发（入门简介）","slug":"wechat-cloud","date":"2020-05-17T14:33:09.142Z","updated":"2020-05-18T08:15:05.454Z","comments":true,"path":"2020/05/17/wechat-cloud/","link":"","permalink":"https://zhongqiyou.github.io/2020/05/17/wechat-cloud/","excerpt":"","text":"一、云开发简介1、云开发是微信小程序提供给我们的服务器。2、包含：数据库、云函数、存储。（会在后面篇一一简介） 二、对比1、如果要问它是用来干什么？有什么好处？那得谈一谈“传统服务器”。2、服务器分为两种：线下服务器（本地），线上服务器（阿里云，腾讯云.）。 2.1、本地服务器：通常用wampServer、phpstudy一些集成环境软件。集成环境包括：php，mysql，Apache。也就是说如果你想搭建自己的本地服务器，你需要懂得一门后端语言和一门数据库。3.传统服务器需要域名，微信小程序提供的不用。注意：微信小程序只支持https4.线上服务器需要付费使用，微信小程序提供的免费 好处：学习成本低，简单入门。 三、开通并初始化如图步骤：1.在微信的左上角调试器旁边有一个云开发，在这里我们点击云开发查看大图 2.点击开通云开发查看大图 3.官网建议我们建两个环境一个测试环境一个正式环境，在这里我就新建一个test方便后面的开发查看大图 4.环境到这里就配置完成了查看大图 5.初始化5.1、初始化需要环境ID， 查找ID查看大图 5.2、app.js文件 ，完成初始化查看大图初始化官方地址：https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/init.html 提示：如果你想使用云函数，要在project.config.json文件进行配置。 123&#123; &quot;cloudfunctionRoot&quot;: &quot;.&#x2F;functions&#x2F;&quot;&#125; 官方地址：https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/getting-started.html 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://zhongqiyou.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"云开发","slug":"云开发","permalink":"https://zhongqiyou.github.io/tags/%E4%BA%91%E5%BC%80%E5%8F%91/"}]},{"title":"进度条类封装(jQuery基本结构编写)","slug":"jquery-function","date":"2020-05-11T04:31:42.026Z","updated":"2020-05-11T06:22:23.413Z","comments":true,"path":"2020/05/11/jquery-function/","link":"","permalink":"https://zhongqiyou.github.io/2020/05/11/jquery-function/","excerpt":"","text":"效果：https://v.youku.com/v_show/id_XNDY2ODI3NDg2OA==.html一、为什么用jQuery基本结构来编写。123456789101112(function( window ) &#123; var jQuery &#x3D; function() &#123; return new jQuery.prototype.init(); &#125; jQuery.prototype &#x3D; &#123; constructor:jQuery , init:function()&#123; &#125; &#125; jQuery.prototype.init.prototype &#x3D; jQuery.prototype; window.jQuery &#x3D; window.$ &#x3D; jQuery; &#125;)( window ); 好处：闭包可以让变量和方法 与 外界“互不干扰”。方便编写类 , 提高代码维护。结构介绍，请到这里了解：https://zhongqiyou.github.io/2020/05/08/jquery-structure/ 二、接下来就直接上源代码:progress.js文件： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647(function(window) &#123; function ProgressBar(external, inside, dot) &#123; return new ProgressBar.prototype.init(external, inside, dot); &#125; ProgressBar.prototype &#x3D; &#123; constructor: ProgressBar, init: function(external, inside, dot) &#123; this.external &#x3D; external; this.inside &#x3D; inside; this.dot &#x3D; dot; &#125;, &#x2F;&#x2F; 拖拽 drag: function() &#123; let _this &#x3D; this; let realLeft, offLeft, result; let totalWidth &#x3D; _this.external.offsetWidth; &#x2F;&#x2F; 改变小圆点位置 this.external.onmousedown &#x3D; function(event) &#123; realLeft &#x3D; event.clientX; &#x2F;&#x2F;获取触发对象中鼠标的X位置 offLeft &#x3D; _this.external.offsetLeft;&#x2F;&#x2F;获取DOM元素，到自己的offsetParent（祖先）的距离 result &#x3D; realLeft - offLeft; _this.dot.style.left &#x3D; result + &quot;px&quot;; _this.inside.style.width &#x3D; result + &quot;px&quot;; &#125; &#x2F;&#x2F; 移动小圆点位置 this.dot.onmousedown &#x3D; function() &#123; document.onmousemove &#x3D; function(event) &#123; realLeft &#x3D; event.clientX; offLeft &#x3D; _this.external.offsetLeft; result &#x3D; realLeft - offLeft; if (result &lt; 0) &#123; result &#x3D; 0; &#125; else if (result &gt; totalWidth) &#123; result &#x3D; totalWidth; &#125; _this.dot.style.left &#x3D; result + &quot;px&quot;; _this.inside.style.width &#x3D; result + &quot;px&quot;; &#125; &#125; document.onmouseup &#x3D; function() &#123; document.onmousemove &#x3D; null; &#125; &#125; &#125; ProgressBar.prototype.init.prototype &#x3D; ProgressBar.prototype; window.ProgressBar &#x3D; ProgressBar&#125;)(window) 关于client、offset位置 ,如果有疑问 , 请到这里了解：https://zhongqiyou.github.io/2020/05/06/position/ 样式： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354* &#123; margin: 0; padding: 0; &#125; body &#123; background: rgba(0, 0, 0, 0.3); &#125; .container &#123; margin: 100px; &#125; .bar, .bar2 &#123; width: 800px; height: 5px; background: rgba(255, 255, 255, 0.5); margin-left: 60px; &#125; .bar&gt;div, .bar2&gt;div &#123; width: 0; height: 100%; position: relative; background: white; &#125; .bar&gt;div&gt;i, .bar2&gt;div&gt;i &#123; display: block; width: 16px; height: 16px; border-radius: 8px; background: white; position: absolute; left: 0px; top: -6.5px; &#125; .back-img &#123; width: 50px; height: 50px; position: relative; top: 25px; background: url(&quot;https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;11&#x2F;YGRmxP.png&quot;); background-size: cover; &#125; .icon &#123; background: url(&quot;https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;11&#x2F;YGR1aQ.png&quot;); background-size: cover; &#125; HTML: 12345678910111213141516171819202122232425262728293031323334353637383940414243 &lt;!-- 播放 --&gt; &lt;div class&#x3D;&quot;container&quot;&gt; &lt;div class&#x3D;&quot;back-img&quot;&gt;&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;bar&quot;&gt; &lt;div&gt; &lt;i&gt;&lt;&#x2F;i&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;!-- 声音 --&gt; &lt;div class&#x3D;&quot;container&quot;&gt; &lt;div class&#x3D;&quot;back-img icon&quot;&gt;&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;bar2&quot; style&#x3D;&quot;width:100px;&quot;&gt; &lt;div&gt; &lt;i&gt;&lt;&#x2F;i&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&#x2F;&#x2F;使用&lt;script src&#x3D;&quot;progress.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt; &#x2F;&#x2F;播放 var external &#x3D; document.querySelector(&quot;.bar&quot;); var inside &#x3D; document.querySelector(&quot;.bar&gt;div&quot;); var dot &#x3D; document.querySelector(&quot;.bar&gt;div&gt;i&quot;); &#x2F;&#x2F;声音 var external2 &#x3D; document.querySelector(&quot;.bar2&quot;); var inside2 &#x3D; document.querySelector(&quot;.bar2&gt;div&quot;); var dot2 &#x3D; document.querySelector(&quot;.bar2&gt;div&gt;i&quot;); &#x2F;&#x2F;可以用new的方式 &#x2F;&#x2F; var bar &#x3D; new ProgressBar(external, inside, dot); &#x2F;&#x2F; var bar2 &#x3D; new ProgressBar(external2, inside2, dot2); &#x2F;&#x2F; bar.drag() &#x2F;&#x2F; bar2.drag() &#x2F;&#x2F;或者 ProgressBar(external, inside, dot).drag(); ProgressBar(external2, inside2, dot2).drag();&lt;&#x2F;script&gt; 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"面向对象","slug":"面向对象","permalink":"https://zhongqiyou.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"jquery","slug":"jquery","permalink":"https://zhongqiyou.github.io/tags/jquery/"}]},{"title":"解析jQuery基本结构","slug":"jquery-structure","date":"2020-05-08T15:00:51.010Z","updated":"2020-05-09T15:48:43.523Z","comments":true,"path":"2020/05/08/jquery-structure/","link":"","permalink":"https://zhongqiyou.github.io/2020/05/08/jquery-structure/","excerpt":"","text":"一、先上代码，再拆代码1234567891011121314151617(function( window, undefined ) &#123; var jQuery &#x3D; function() &#123; return new jQuery.prototype.init(); &#125; jQuery.prototype &#x3D; &#123; constructor:jQuery , init:function()&#123; this.name &#x3D; &quot;zqy&quot;; this.age &#x3D; 23; &#125; , log:function()&#123; alert(this.name , this.age) &#125; &#125; jQuery.prototype.init.prototype &#x3D; jQuery.prototype; window.jQuery &#x3D; window.$ &#x3D; jQuery; &#125;)( window ); 1.从最外层开始 ，如下： 123(function(window , undefined)&#123;&#125;)(window) 解释：从上可以看出jQuery的最外层是一个闭包。还带两个参数window ， undefined。为什么要传window：为了方便后期代码压缩为什么要传undefined：也是为了后期代码压缩 ，在IE9以下的浏览器undefined可以被修改，为了保证内部使用的undefined不被修改，所以需要接受一个正确的undefined如果不知道闭包是什么，可以移步去看我写的闭包篇:https://zhongqiyou.github.io/2020/05/07/closure/ 2.在闭包中声明构造函数 ， 函数内部带有return 123var jQuery &#x3D; function ()&#123; return new jQuery.prototype.init();&#125; 解释：声明一个构造函数，如果构造函数中添加return 或者 不添加return，那么new出来的实例会是什么？两种情况：第一种:构造函数内部没有添加return 或者 添加return但是没有添加值 再或者添加return但是后面跟着值为“特殊类型”或者“基本类型”数据： 123456function Test()&#123; this.name &#x3D; &quot;zqy&quot;; return &#x2F;&#x2F; ; 数字、字符串、num、undefined&#125;var test &#x3D; new Test();console.log(test); 结果，如图所示： 第二种：构造函数内部添加return , 并rerun后面带的是引用类型数据： 123456function Test()&#123; this.name &#x3D; &quot;zqy&quot;; return &#123;&#125;&#125;var test &#x3D; new Test();console.log(test); 结果，如图所示： 对比得出：如果构造函数没有添加return或者添加了return但是后面值为“特殊类型”与“基本类型”数据 那么new出来的实例依然指向自己 ， 反之指向return后面带的值；这里就不多举例了，如果想详细了解：https://www.jianshu.com/p/0bcdf34ba14f 3.原型prototype重定义： 1234567891011jQuery.prototype &#x3D; &#123; constructor:jQuery , init:function()&#123; this.name &#x3D; &quot;zqy&quot;; this.age &#x3D; 23; &#125; , log:function()&#123; alert(this.name , this.age) &#125; , &#125; 解析：把自己的原型给重新定义。还记得寄生组合继承就是用重定义prototype来实现的吗？它里边用一个Object.create(obj)方法:创建新对象，里边提供新的_proto_,而这个_proto__指向参数obj;然后在和新创建的对象添加上constructor属性，然后就完成了继承。那上面的代码也是一样，只不过不提供新的_proto_ , 相当于创建了一个新对象 ，里面补上了constructor属性， 保证原型的完整性。 在没有重新定义原型之前 ，添加属性和方法： 1234jQuery.prototype.name &#x3D; &quot;zqy&quot;;jQuery.prototype.getName &#x3D; function()&#123; return this.name;&#125; 和上面一比：是不是比之前，编写方便 , 代码直观，好看整齐。 4.改变原型 1jQuery.prototype.init.prototype &#x3D; jQuery.prototype; 解释:把jQuery重新定义的原型 ， 赋值给init中的原型。也相当于重新定义了init的原型 5.定义全局变量直接使用 1window.jQuery &#x3D; window.$ &#x3D; jQuery; 解析：为了使用闭包内部函数。如果不理解，为什么这样做:请回到1里面提到的地址; 6.为什么要在构造函数return和修改init的原型如下代码： 1234var jQuery &#x3D; function() &#123; return new jQuery.prototype.init();&#125;jQuery.prototype.init.prototype &#x3D; jQuery.prototype; 6.1:为了方便初始化数据没有添加return与重新定义init原型前： 12var newJquery &#x3D; new jQuery();newJquery.log(); &#x2F;&#x2F;undefined undefined //在调用之前newJquery.log()之前 , 必须调用newJquery.init() ,才能拿到结果; 添加return与修改原型后： 12var newJquery &#x3D; new jQuery();newJquery.log(); &#x2F;&#x2F;zqy 23 在上面的2讲到函数中的return，那么上面的new代表实例化init构造函数。但是init原型中并没有log函数方法，所以走上面的4改变原型。 6.2:为了new实例化简写成$()旧： 1var newJquery &#x3D; new jQuery(); 新： 1$() 或 jQeury() 7.像jQuery一样编码：为了不打乱上面的代码在下面重新写一次源代码： 12345678910111213141516171819202122232425262728(function( window, undefined ) &#123; var jQuery &#x3D; function() &#123; return new jQuery.prototype.init(); &#125; jQuery.prototype &#x3D; &#123; constructor:jQuery , init:function()&#123; this.name &#x3D; &quot;zqy&quot;; this.age &#x3D; 23; &#125; , log:function()&#123; alert(this.name , this.age) &#125; , &#125; jQuery.each &#x3D; function(arr , callBack)&#123; for (let i &#x3D; 0; i &lt; arr.length; i++) &#123; callBack(arr[i] , i) &#125; &#125; jQuery.prototype.init.prototype &#x3D; jQuery.prototype; window.jQuery &#x3D; window.$ &#x3D; jQuery; &#125;)( window ); &#x2F;&#x2F;使用each var arr &#x3D; [1 , 3 , 5 , &quot;zqy&quot; , 23]; $.each(arr , function(value , index)&#123; console.log(value , index) &#125;) 结果如图所示： 本文来自李南江老师教学视屏知识点讲解，另外加上我个人的一些理解，把视屏转写成了这章博客。如果不懂，可以看李南江老师的视屏解析：https://www.bilibili.com/video/BV17W41137jn?p=94 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"框架","slug":"框架","permalink":"https://zhongqiyou.github.io/categories/%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://zhongqiyou.github.io/tags/jQuery/"}]},{"title":"什么是闭包？","slug":"closure","date":"2020-05-07T05:07:34.182Z","updated":"2020-05-08T14:59:12.335Z","comments":true,"path":"2020/05/07/closure/","link":"","permalink":"https://zhongqiyou.github.io/2020/05/07/closure/","excerpt":"","text":"一、闭包是什么？1.要理解闭包，首先要理解javascript中的变量作用域：变量作用域分为两种 ，一种叫全局变量，另一种叫局部变量。2.闭包是一个立即执行的函数，把全部变量与方法都都定义在一个function(局部作用域)里边。一般用这个函数内部定义的函数来访问局部变量。所以很多人称它为：定义在一个函数中的函 例子： 12345678910111213141516171819(function() &#123; var num &#x3D; &quot;变量num1&quot;; function childOne()&#123; console.log(num); &#125; window.childOne &#x3D; childOne; &#125;)();(function() &#123; var num &#x3D; &quot;变量num2&quot;; function childTwo()&#123; console.log(num); &#125; window.childTwo &#x3D; childTwo; &#125;)(); 解释：声明一个匿名函数，在内部声明一个变量num 和 函数childOne。在childOne函数中访问外部变量num构成了一个闭包。num作用域在匿名函数开始到结束。在我声明第二个匿名函数，你会发现，也在内部声明了num变量。在javascript中，无论声明变量，还是声明函数，重复声明，都会发生后面声明的覆盖前面声明的。 好处：变量和方法都可以重复声明互不干扰，不用担心覆盖问题。 最后你会发现，我用window把childOne变成全局变量。至于为什么，接着看例子 12345678910function parent() &#123; var i &#x3D; 1; return function() &#123; alert(i++); &#125; &#125; var child &#x3D; parent(); child() &#x2F;&#x2F; i &#x3D; 1 child() &#x2F;&#x2F; i &#x3D; 2 child() &#x2F;&#x2F; i &#x3D; 3 解释：声明一个名为parent函数 ， 在内部声明变量i。函数返回值为一个函数，里边弹一个从函数外部访问的变量i。把parent函数的返回值 赋值 child变量。然后执行了三次。会发现i一直没有被回收，一直存在内存中。 好处：在内存中维持变量。注意：这个好处是一把双刃刀，如果太多变量需要维持在内存中，那么网页会变慢，严重会出现网页奔溃 回到刚才第一个例子提出的问题 , 为什么要用window把childOne变成全局变量 ，为什么要举第一个例子：首先来看看第一个例子与第二例子的区别。第一个：匿名函数立即执行 ， 在内部用window把childOne变成全局变量。 12&#x2F;&#x2F;函数内部window.childTwo &#x3D; childTwo; 第二个：声明parent函数，在外部用child变量来 接收 执行的parent的返回值。 12&#x2F;&#x2F;函数外部var child &#x3D; parent(); 区别：第一个写完了，就可以直接使用了。而第二个还需要在外面手动执行来使用。一个自动，一个手动。 举第一个例子，原因有二：1、立即执行闭包，优化，全自动。2、jquery框架中做法 ， 还有它确实比第二个例子好。 闭包经典例子就是jquery框架。 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"闭包","slug":"闭包","permalink":"https://zhongqiyou.github.io/categories/%E9%97%AD%E5%8C%85/"}],"tags":[{"name":"闭包","slug":"闭包","permalink":"https://zhongqiyou.github.io/tags/%E9%97%AD%E5%8C%85/"}]},{"title":"js中常用坐标(event对象、offset)","slug":"position","date":"2020-05-06T15:23:57.522Z","updated":"2020-05-07T04:40:19.868Z","comments":true,"path":"2020/05/06/position/","link":"","permalink":"https://zhongqiyou.github.io/2020/05/06/position/","excerpt":"","text":"一、event对象中常用坐标属性位置1.offsetX/Y: 获取鼠标指针位置 , 相对于触发事件的对象（X ， Y）坐标2.clientX/Y: 获取鼠标指针位置 , 相对于浏览器有效区域的（X ， Y）坐标。 注意：只相对可视窗口区域坐标 ， 不包括滚动条3. pageX/Y: 获取鼠标指针位置 , 相对于浏览器有效区域的（X ， Y）坐标 ， 包括滚动条4.screenX/Y: 获取鼠标指针位置 , 相对于电脑显示屏的（X ， Y）坐标 图解：查看大图 二、offsetLeft属性和offsetTop属性1.offsetLeft/Top：获取元素的偏移量 ， 相对于offsetParent（祖先元素）图解：查看大图 三、图片来源1.event对象位置 图片装载博客：https://blog.csdn.net/lzding/article/details/45437707 1.1：原博客只有图解 ，我这里用文字说明了一下。 2.offsetLeft\\Top属性 图片转载博客：https://www.jianshu.com/p/9df947ab97bb 2.1：原博客有兼容方法 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"坐标位置","slug":"坐标位置","permalink":"https://zhongqiyou.github.io/categories/%E5%9D%90%E6%A0%87%E4%BD%8D%E7%BD%AE/"}],"tags":[{"name":"坐标位置","slug":"坐标位置","permalink":"https://zhongqiyou.github.io/tags/%E5%9D%90%E6%A0%87%E4%BD%8D%E7%BD%AE/"}]},{"title":"面向对象 + 继承","slug":"function-class","date":"2020-04-27T15:59:48.525Z","updated":"2020-05-06T15:23:54.676Z","comments":true,"path":"2020/04/27/function-class/","link":"","permalink":"https://zhongqiyou.github.io/2020/04/27/function-class/","excerpt":"","text":"一、什么是面向对象:1.是一种编程思想，JS本身就是基于面向对象构建出来的。2.特征:拥有属性与方法的数据3.生活例子： 一个人有:名字、年龄、会吃饭、会看电视、洗碗、拖地等。 那么人的属性：名字和年龄 方法：吃饭、看电视、洗碗、拖地4.代码例子： 123456789101112function People(name, age) &#123; &#x2F;&#x2F;属性 this.name &#x3D; name; this.age &#x3D; age; &#x2F;&#x2F;方法 this.havingDinner &#x3D; function() &#123; alert(&quot;吃饭&quot;) &#125;; this.watchTv &#x3D; function() &#123; alert(&quot;看电视&quot;) &#125; &#125; 5.注意：每个对象都有一个prototype(原型对象) , 里面包含着constructor与__proto__。 constructor属性：指向创建函数 __proto__属性：继承上一级父类对象，里面也包含着constructor与__proto__一直的往上继承直接到object 二、继承：1.子类继承父类的属性和方法2.依靠prototype属性来继承 1.原型继承1234567891011121314151617181920212223242526272829&#x2F;&#x2F; 创建一个函数 function Dog(name, age) &#123; this.name &#x3D; name; this.age &#x3D; age; &#125; Dog.prototype.nameLog &#x3D; function() &#123; console.log(&quot;名字:&quot;, this.name); &#125; Dog.prototype.ageLog &#x3D; function() &#123; console.log(&quot;年龄:&quot;, this.age); &#125; &#x2F;&#x2F; 创建一个新函数 function newDog(addr) &#123; this.addr &#x3D; addr; &#x2F;&#x2F;新增属性 &#125; newDog.prototype &#x3D; new Dog(&quot;名字&quot; , &quot;年龄&quot;); &#x2F;&#x2F;继承Dog(指向Dog实例含（\\__proto__）) , 但缺少constructor newDog.prototype.constructor &#x3D; newDog; &#x2F;&#x2F;添加constructor属性保证原型的完整 &#x2F;&#x2F; 新增方法 newDog.prototype.addrLog &#x3D; function() &#123; console.log(&quot;地址:&quot;, this.addr); &#125; &#x2F;&#x2F; 调用继承与自身 var extendsDog &#x3D; new newDog(&quot;二哈&quot;); extendsDog.nameLog(); extendsDog.ageLog(); extendsDog.addrLog(); 缺点：继承所有的方法与属性都为”公有” 2.call与apply继承1234567891011121314&#x2F;&#x2F; 创建一个函数 function Dog(name, age) &#123; this.name &#x3D; name; this.age &#x3D; age; &#125; &#x2F;&#x2F; 创建一个新函数 function newDog(name, age, addr) &#123; call与apply的区别：传参方式 Dog.call(this, name, age) 或者 Dog.call(this, [name, age]) &#x2F;&#x2F;相当于this.name &#x3D; name\\this.age &#x3D; age this.addr &#x3D; addr; &#x2F;&#x2F;新增属性 &#125; &#x2F;&#x2F; 调用继承与自身 var extendsDog &#x3D; new newDog(&quot;testName&quot;, &quot;testAge&quot;, &quot;外国&quot;); console.log(extendsDog); 缺点：只能继承“私有” 3.寄生组合继承(call + Object.create)1.Object.create(obj)方法：创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。 12345678910111213141516171819202122232425262728293031&#x2F;&#x2F; 创建一个对象 function Dog(name, age) &#123; this.name &#x3D; name; this.age &#x3D; age; &#125; Dog.prototype.nameLog &#x3D; function() &#123; console.log(&quot;名字:&quot;, this.name); &#125; Dog.prototype.ageLog &#x3D; function() &#123; console.log(&quot;年龄:&quot;, this.age); &#125; &#x2F;&#x2F; 创建一个新对象 function newDog(name, age, addr) &#123; Dog.call(this, name, age) this.addr &#x3D; addr; &#x2F;&#x2F;添加新属性 &#125; &#x2F;&#x2F; 创建一个空对象&#123;&#125; , 里面包含__proto__属性，指向参数对象 newDog.prototype &#x3D; Object.create(Dog.prototype); &#x2F;&#x2F;在空对象中添加constructor属性指向，保证原型的完整 newDog.prototype.constructor &#x3D; newDog; newDog.prototype.addrLog &#x3D; function() &#123; console.log(&quot;地址:&quot;, this.addr); &#125; &#x2F;&#x2F; 调用继承与自身 var extendsDog &#x3D; new newDog(&quot;二哈&quot;, 9, &quot;外国&quot;); extendsDog.nameLog(); extendsDog.ageLog(); extendsDog.addrLog(); 好处：父类私有和公有的分别是子类实例的私有和公有属性方法 4.原型链继承 + call继承123456789101112131415161718192021222324252627282930&#x2F;&#x2F; 创建一个对象 function Dog(name, age) &#123; this.name &#x3D; name; this.age &#x3D; age; &#125; Dog.prototype.nameLog &#x3D; function() &#123; console.log(&quot;名字:&quot;, this.name); &#125; Dog.prototype.ageLog &#x3D; function() &#123; console.log(&quot;年龄:&quot;, this.age); &#125; &#x2F;&#x2F; 创建一个新对象 function newDog(name, age, addr) &#123; Dog.call(this, name, age) &#x2F;&#x2F;相当于 this.name &#x3D; name\\this.age &#x3D; age this.addr &#x3D; addr; &#x2F;&#x2F;为自身添加属性 &#125; newDog.prototype &#x3D; new Dog(); &#x2F;&#x2F;继承Dog(指向Dog实例含（__proto__）) , 但缺少constructor newDog.prototype.constructor &#x3D; newDog; &#x2F;&#x2F;把constructor指向自己(更正constructor) &#x2F;&#x2F; 新增方法 newDog.prototype.addrLog &#x3D; function() &#123; console.log(&quot;地址:&quot;, this.addr); &#125; &#x2F;&#x2F; 调用继承与自身 var extendsDog &#x3D; new newDog(&quot;二哈&quot;, 9, &quot;外国&quot;); extendsDog.nameLog(); extendsDog.ageLog(); extendsDog.addrLog(); 好处：父类私有和公有的分别是子类实例的私有和公有属性方法 Class继承（ES6）在没有出现Class之前，Function既是构造函数同时也是类。所以Class出现好处之一 ， 把我们之前的function“归为一类”。 123456789101112131415161718192021222324252627282930313233343536&#x2F;&#x2F; 创建一个类class People &#123; constructor(name, age) &#123; this.name &#x3D; name; this.age &#x3D; age; &#125; nameLog() &#123; console.log(&quot;姓名：&quot;, this.name); &#125; ageLog() &#123; console.log(&quot;年龄:&quot;, this.age); &#125;&#125;&#x2F;&#x2F; 创建一个新类class newPeople extends People &#123; constructor(name, age, addr, salary) &#123; super(name, age); &#x2F;&#x2F; 新增属性 this.addr &#x3D; addr; this.salary &#x3D; salary; &#125; &#x2F;&#x2F; 新增方法 addrLog() &#123; console.log(&quot;地址：&quot;, this.addr); &#125; salaryLog() &#123; console.log(&quot;薪资:&quot;, this.salary); &#125;&#125;var extendsPeople &#x3D; new newPeople(&quot;zqy&quot;, 23, &quot;湛江&quot;, 0.00);&#x2F;&#x2F; 调用继承与自身extendsPeople.nameLog();extendsPeople.ageLog();extendsPeople.addrLog();extendsPeople.salaryLog(); 如图： 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"面向对象","slug":"面向对象","permalink":"https://zhongqiyou.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"面向对象","slug":"面向对象","permalink":"https://zhongqiyou.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}]},{"title":"jQuery 自定义（美化）滚动条 customcontentscroller 插件使用","slug":"custom-content-scroll","date":"2020-04-19T04:10:58.827Z","updated":"2020-04-19T05:39:10.087Z","comments":true,"path":"2020/04/19/custom-content-scroll/","link":"","permalink":"https://zhongqiyou.github.io/2020/04/19/custom-content-scroll/","excerpt":"","text":"官方地址：http://manos.malihu.gr/jquery-custom-content-scroller/ customcontentscroller简介：依赖于jquery ， 能轻松追加很好看（美化）的滚动条 使用步骤:1.下载并引入jQuery类库极其相关的插件js和css库 123&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;malihu-custom-scrollbar-plugin-master&#x2F;jquery.mCustomScrollbar.css&quot; &#x2F;&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;jquery&#x2F;1.10.2&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;malihu-custom-scrollbar-plugin-master&#x2F;jquery.mCustomScrollbar.concat.min.js&quot;&gt;&lt;&#x2F;script&gt; 注意：如果你在官方复制的jquery1.11.1版本，它会抛出以下错误: 2.给元素追加自定义滚动条方法: 2-1. 设置滚动条模板方式一：通过标签中属性节点方法设置 1234567&lt;div class&#x3D;&quot;container&quot; data-mcs-theme&#x3D;&quot;dark&quot;&gt; &lt;!-- your content --&gt;&lt;&#x2F;div&gt; $(function() &#123; $(&quot;.content&quot;).mCustomScrollbar(); &#125;) 2-2. 设置滚动模板条方式二：通过js方法设置 123456789&lt;div class&#x3D;&quot;container&quot;&gt; &lt;!-- your content --&gt;&lt;&#x2F;div&gt;$(function() &#123; $(&quot;.content&quot;).mCustomScrollbar(&#123; theme: &quot;rounded-dots&quot; &#125;);&#125;) 3.如果需要横向滑动，只需要在原来代码添加axis： 12345$(function() &#123; $(&quot;.content&quot;).mCustomScrollbar(&#123; theme: &quot;rounded-dots&quot; , axis: &quot;x&quot; &#125;); 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"jquery","slug":"jquery","permalink":"https://zhongqiyou.github.io/categories/jquery/"}],"tags":[{"name":"jquery插件","slug":"jquery插件","permalink":"https://zhongqiyou.github.io/tags/jquery%E6%8F%92%E4%BB%B6/"}]},{"title":"为什么要学习jquery与webpack？？？","slug":"jquery-webpack","date":"2020-04-18T16:03:18.045Z","updated":"2020-04-19T03:46:55.047Z","comments":true,"path":"2020/04/19/jquery-webpack/","link":"","permalink":"https://zhongqiyou.github.io/2020/04/19/jquery-webpack/","excerpt":"","text":"存在问题如果你现在还是该专业学生或者自学者。还没有真正的在该行业工作过时。现在有一个项目要上线，有很多问题需要我们关注：在低版本IE的强检查时的标签符号，函数方法(addeventlistener、trim等)，css3样式（border、opacity、background-size等）都不兼容。 解决问题jquery简介：封装一系列原生js提供我们使用，它能解决浏览器兼容函数方法问题存在。webpack简介:把你写的源代码，通过压缩，打包，转换，检查...一系列处理能让浏览器识别的代码。 比如：你写的js代码带有es6语法，底版的浏览器强检测标点符号，这些它都能帮我们搞。 虽然现在大部分的框架都有自己的脚手架 ， 但是学习这个还是很有好处。 比如:现在有vue-cli项目需要打包 ，但是在路由模板下，html中&lt;img src=&quot;&quot;&gt; 和 css中 background：url(&quot;&quot;)。这时你打包你会发现只有html中的图片出来。而css中的背景图片路径找不到，底层问题，还需要底层知识来解决：需要找到对应处理图片loader，修改publicPath: 属性以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"jquery/webpack","slug":"jquery-webpack","permalink":"https://zhongqiyou.github.io/categories/jquery-webpack/"}],"tags":[{"name":"jquery/webpack","slug":"jquery-webpack","permalink":"https://zhongqiyou.github.io/tags/jquery-webpack/"}]},{"title":"AJAX终极封装（兼容IE）","slug":"ajax","date":"2020-04-18T15:21:16.838Z","updated":"2020-05-07T05:07:43.043Z","comments":true,"path":"2020/04/18/ajax/","link":"","permalink":"https://zhongqiyou.github.io/2020/04/18/ajax/","excerpt":"","text":"ajax简介：AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。 学习地址：https://www.w3school.com.cn/ajax/index.asp js代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&#x2F;&#x2F;格式化数据（“&#123;name:&#39;zqy&#39;,age:21&#125; &#x3D;&gt; name&#x3D;zqy&amp;age&#x3D;23”）function format(data) &#123; var arr &#x3D; []; &#x2F;&#x2F; 兼容ie缓存问题:每次访问同一个url默认同一个结果 &#x2F;&#x2F; 所以解决方案 , 每一次请求不同的url data.ran &#x3D; Math.ceil(Math.random() * 10); &#x2F;&#x2F;添加随机数 for (var key in data) &#123; &#x2F;&#x2F; 在url中是不能出现中文的 ， 如果出现了中文需要转码 , 使用encodeURLComponent arr.push(encodeURIComponent(key) + &quot;&#x3D;&quot; + encodeURIComponent(data[key])); &#125;; return arr.join(&quot;&amp;&quot;);&#125;;function ajax(options) &#123; &#x2F;&#x2F; type(请求方式), url(请求地址), data(请求参数), time(请求超时时间), success(成功回调), error(失败回调) var xml; &#x2F;&#x2F; 兼容ie对象不同问题 if (window.XMLHttpRequest) &#123; xml &#x3D; new XMLHttpRequest(); &#125; else &#123; xml &#x3D; new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); &#125;; if (options.type.toUpperCase() &#x3D;&#x3D; &quot;GET&quot;) &#123; &#x2F;&#x2F;不区分大小写 xml.open(options.type, options.url + &quot;?&quot; + format(options.data), true); xml.send(); &#125; else &#123; xml.open(options.type, options.url, true); xml.setRequestHeader(&quot;Content-type&quot;, &quot;application&#x2F;x-www-form-urlencoded&quot;); xml.send(format(options.data)); &#125; xml.onreadystatechange &#x3D; function () &#123; if (xml.readyState &#x3D;&#x3D;&#x3D; 4) &#123; if (xml.status &#x3D;&#x3D;&#x3D; 200 || xml.status &#x3D;&#x3D;&#x3D; 304) &#123; options.success(xml); &#125; else &#123; options.error(xml); &#125; &#125; &#125; &#x2F;&#x2F; 超时终止请求 if (options.time) &#123; setTimeout(function () &#123; xml.abort(); &#125;, options.time); &#125;&#125;&#x2F;&#x2F;测试封装 ajax(&#123; url: &quot;test.php&quot;, type: &quot;post&quot;, data: &#123; &quot;name&quot;: &quot;zqy&quot;, &quot;age&quot;: &quot;23&quot; &#125;, time: 3000, success: function (res) &#123; console.log(&quot;请求成功&quot; + res.responseText); &#125;, error: function (res) &#123; console.log(&quot;请求失败&quot; + res) &#125; &#125;)&#x2F;&#x2F; 用对象作为参数 ，就不用顾虑参数的顺序问题。&#x2F;&#x2F; 参数想怎么传就怎么传。 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"ajax","slug":"ajax","permalink":"https://zhongqiyou.github.io/categories/ajax/"}],"tags":[{"name":"ajax","slug":"ajax","permalink":"https://zhongqiyou.github.io/tags/ajax/"}]},{"title":"谈谈记录的两个面试考题","slug":"interviewChat","date":"2020-03-25T16:55:30.752Z","updated":"2020-04-18T15:17:25.150Z","comments":true,"path":"2020/03/26/interviewChat/","link":"","permalink":"https://zhongqiyou.github.io/2020/03/26/interviewChat/","excerpt":"","text":"在面试之前，复习是必不可少的准备。面试过很多家公司，大概都是对我知识的全面基本了解，没有过直接上机编写一个小Demo。我一直以来遇到的面试方式都是，考题，问答。比如：CSS\\HTML5新特性，定位（相对/绝对/固定），清除浮动，对象，闭包，ajax请求，es6语法，webpack核心，vue主流框架方面知识。我一路走过来也见识了很多的考题，过后有不足我也及时学习，并把一些记录下来。所以记录他们 ， 和我发朋友圈用意差不多。记录自己 ， 记录生活嘛！","categories":[{"name":"面试","slug":"面试","permalink":"https://zhongqiyou.github.io/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"https://zhongqiyou.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"}]},{"title":"面试遇题2","slug":"interviewDemo2","date":"2020-03-24T15:42:49.046Z","updated":"2020-03-25T16:53:51.478Z","comments":true,"path":"2020/03/24/interviewDemo2/","link":"","permalink":"https://zhongqiyou.github.io/2020/03/24/interviewDemo2/","excerpt":"","text":"Demo来源：二轮面试 ，面试考题。 谈谈demo中的功能实现：对于”模糊查询”与”排序”，可能你会想到，数据库（mysql）：排序命令：select * from 表名 order by 字段名 asc/desc;模糊查询：select * from 表名 where 字段名 like ‘%关键字%’;当然你还要会一门后端语言来连接数据库并且操作数据库：如PHP、Node 如果你在写微信小程序，你会发现云服务数据库中，文档根本没有“模糊查询”这个语句，你只能用正则匹配; 所以本文排序功能的实现方法：使用原生”冒泡排序”。（没有涉及到上面所提到知识方面）此方法的好处：可以减少与服务器的对话，从而提高性能如果考虑到没有接触过上面所提到的知识，推荐考虑此方法… 分享:本文与考题大致相同 ，vue-cli工具工程化，为了页面美观，用vant（UI）搭建页面 本文涉及技术：html、css、javascript、vue、vue-cli、vant 效果视屏链接：https://v.youku.com/v_show/id_XNDYwMzIzMzM2OA==.html 接下来是源代码：公共组件代码（components文件夹）: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320&lt;template&gt; &lt;div&gt; &lt;!-- 筛选、排序 --&gt; &lt;div class&#x3D;&quot;position&quot;&gt; &lt;van-dropdown-menu&gt; &lt;van-dropdown-item v-model&#x3D;&quot;value1&quot; @change&#x3D;&quot;onSwiIndustry&quot; :options&#x3D;&quot;option1&quot; &#x2F;&gt; &lt;van-dropdown-item v-model&#x3D;&quot;value2&quot; @change&#x3D;&quot;onSwiFlow&quot; :options&#x3D;&quot;option2&quot; &#x2F;&gt; &lt;&#x2F;van-dropdown-menu&gt; &lt;&#x2F;div&gt; &lt;!-- 数据加载 --&gt; &lt;van-pull-refresh v-model&#x3D;&quot;refreshing&quot; @refresh&#x3D;&quot;onRefresh&quot;&gt; &lt;van-list v-model&#x3D;&quot;loading&quot; :finished&#x3D;&quot;finished&quot; finished-text&#x3D;&quot;没有更多了&quot; @load&#x3D;&quot;onLoad&quot;&gt; &lt;ul style&#x3D;&quot;margin-top:50px&quot;&gt; &lt;!-- 商品卡片列表 --&gt; &lt;li v-for&#x3D;&quot;(item, index) in list&quot; :key&#x3D;&quot;index&quot;&gt; &lt;van-card :desc&#x3D;&quot;item.explain + &#39;(&#39; + item.or + &#39;)&#39;&quot; :title&#x3D;&quot;item.title&quot; :thumb&#x3D;&quot;item.src&quot; &gt; &lt;div slot&#x3D;&quot;bottom&quot;&gt; &lt;div class&#x3D;&quot;list_info_i&quot;&gt; &lt;dl class&#x3D;&quot;list_info_views&quot;&gt; &lt;!-- 点击浏览次数增加 --&gt; &lt;dt @click&#x3D;&quot;item.preview++&quot;&gt;&lt;&#x2F;dt&gt; &lt;dd&gt;&#123;&#123;item.preview&#125;&#125;&lt;&#x2F;dd&gt; &lt;div class&#x3D;&quot;clear&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;dl&gt; &lt;dl class&#x3D;&quot;list_info_comment&quot;&gt; &lt;!-- 点击评论次数增加 --&gt; &lt;dt @click&#x3D;&quot;item.comment++&quot;&gt;&lt;&#x2F;dt&gt; &lt;dd&gt;&#123;&#123;item.comment&#125;&#125;&lt;&#x2F;dd&gt; &lt;div class&#x3D;&quot;clear&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;dl&gt; &lt;dl class&#x3D;&quot;list_info_like&quot;&gt; &lt;!-- 点击喜欢次数增加 --&gt; &lt;dt @click&#x3D;&quot;item.like++&quot;&gt;&lt;&#x2F;dt&gt; &lt;dd&gt;&#123;&#123;item.like&#125;&#125;&lt;&#x2F;dd&gt; &lt;div class&#x3D;&quot;clear&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;dl&gt; &lt;div class&#x3D;&quot;clear&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;van-card&gt; &lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;van-list&gt; &lt;&#x2F;van-pull-refresh&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;HelloWorld&quot;, data() &#123; return &#123; value1: 0, value2: 0, option1: [ &#123; text: &quot;全部行业&quot;, value: 0 &#125;, &#123; text: &quot;企业集团&quot;, value: 1 &#125;, &#123; text: &quot;门户电商&quot;, value: 2 &#125;, &#123; text: &quot;游戏网页&quot;, value: 3 &#125;, &#123; text: &quot;摄影后期&quot;, value: 4 &#125;, &#123; text: &quot;图形设计&quot;, value: 5 &#125;, &#123; text: &quot;图标Icon&quot;, value: 6 &#125;, &#123; text: &quot;其他&quot;, value: 7 &#125; ], option2: [ &#123; text: &quot;最新推荐&quot;, value: 0 &#125;, &#123; text: &quot;最多喜欢&quot;, value: 1 &#125;, &#123; text: &quot;最多浏览&quot;, value: 2 &#125;, &#123; text: &quot;最多评论&quot;, value: 3 &#125; ], list_arr: [ &#123; id: 0, src: &quot;.&#x2F;static&#x2F;images&#x2F;1421841277109.jpg&quot;, title: &quot;UEMO用户图片排序问题&quot;, explain: &quot;经验分享&quot;, or: &quot;其他&quot;, preview: 6907, comment: 5, like: 8 &#125;, &#123; id: 1, src: &quot;.&#x2F;static&#x2F;images&#x2F;1421838333851.jpg&quot;, title: &quot;动画写实场景&quot;, explain: &quot;木白&quot;, or: &quot;其他&quot;, preview: 186, comment: 0, like: 1 &#125;, &#123; id: 2, src: &quot;.&#x2F;static&#x2F;images&#x2F;1421805669559.jpg&quot;, title: &quot;太白案例更新+ui页面&quot;, explain: &quot;u21&quot;, or: &quot;企业集团&quot;, preview: 423, comment: 0, like: 1 &#125;, &#123; id: 3, src: &quot;.&#x2F;static&#x2F;images&#x2F;1421805477901.jpg&quot;, title: &quot;白 .&quot;, explain: &quot;郗鉴&quot;, or: &quot;图标Icon&quot;, preview: 876, comment: 2, like: 10 &#125;, &#123; id: 4, src: &quot;.&#x2F;static&#x2F;images&#x2F;1421763729558.jpg&quot;, title: &quot;MEIOS(决赛补齐界面)&quot;, explain: &quot;yu0910&quot;, or: &quot;图标Icon&quot;, preview: 1228, comment: 1, like: 8 &#125;, &#123; id: 5, src: &quot;.&#x2F;static&#x2F;images&#x2F;1421742102374.jpg&quot;, title: &quot;5年前的游戏icon及地图绘制&quot;, explain: &quot;又见章鱼哥&quot;, or: &quot;图标Icon&quot;, preview: 1228, comment: 0, like: 1 &#125;, &#123; id: 6, src: &quot;.&#x2F;static&#x2F;images&#x2F;142174136543.jpg&quot;, title: &quot;&lt;hello logo&gt;特别篇——动物畅想曲&quot;, explain: &quot;君小阳&quot;, or: &quot;图形设计&quot;, preview: 1264, comment: 4, like: 3 &#125;, &#123; id: 7, src: &quot;.&#x2F;static&#x2F;images&#x2F;1421734678611.jpg&quot;, title: &quot;离职后做的一个外包&quot;, explain: &quot;烽烟&quot;, or: &quot;企业集团&quot;, preview: 1441, comment: 1, like: 7 &#125;, &#123; id: 8, src: &quot;.&#x2F;static&#x2F;images&#x2F;1421726012956.jpg&quot;, title: &quot;Bodhi&quot;, explain: &quot;酷站推荐&quot;, or: &quot;企业集团&quot;, preview: 1987, comment: 1, like: 3 &#125;, &#123; id: 9, src: &quot;.&#x2F;static&#x2F;images&#x2F;1420788431778.jpg&quot;, title: &quot;复古小清新rosevovo&quot;, explain: &quot;妞范儿&quot;, or: &quot;门户电商&quot;, preview: 3186, comment: 8, like: 38 &#125; ], list: [], loading: false, finished: false, refreshing: false, len: 0 &#125;; &#125;, methods: &#123; onLoad() &#123; setTimeout(() &#x3D;&gt; &#123; &#x2F;&#x2F; 拉下刷新（全部数据初始化） if (this.refreshing) &#123; this.value1 &#x3D; 0; this.value2 &#x3D; 0; this.list &#x3D; []; this.len &#x3D; 0; this.refreshing &#x3D; false; &#125; &#x2F;&#x2F; 一次加载5条数据 for (let i &#x3D; 0; i &lt; 5; i++) &#123; this.list.push(this.list_arr[i + this.len]); &#125; this.loading &#x3D; false; if (this.list.length &gt;&#x3D; 10) &#123; this.finished &#x3D; true; &#125; &#125;, 1000); this.len &#x3D; this.list.length; &#125;, onRefresh() &#123; &#x2F;&#x2F; 清空列表数据 this.finished &#x3D; false; &#x2F;&#x2F; 重新加载数据 &#x2F;&#x2F; 将 loading 设置为 true，表示处于加载状态 this.loading &#x3D; true; this.onLoad(); &#125;, &#x2F;&#x2F; 切换行业（筛选） onSwiIndustry(e) &#123; if (e &#x3D;&#x3D; 0) &#123; this.list &#x3D; this.list_arr; &#125; else &#123; this.list &#x3D; this.list_arr.filter((value, index) &#x3D;&gt; &#123; if (value.or &#x3D;&#x3D; this.option1[e].text) &#123; return index; &#125; &#125;); &#125; &#125;, &#x2F;&#x2F; 切换各种（留言、喜欢、浏览）排序 onSwiFlow(e) &#123; if (e &#x3D;&#x3D; 1) &#123; this.onSort(&quot;like&quot;, &quot;&gt;&quot;); &#125; else if (e &#x3D;&#x3D; 2) &#123; this.onSort(&quot;preview&quot;, &quot;&gt;&quot;); &#125; else if (e &#x3D;&#x3D; 3) &#123; this.onSort(&quot;comment&quot;, &quot;&gt;&quot;); &#125; &#125;, &#x2F;&#x2F; 排序封装 (str：升序请使用“&lt;” , 降序请使用“&gt;”) onSort(name, str) &#123; if (str &#x3D;&#x3D; &quot;&gt;&quot;) &#123; for (let i &#x3D; 0; i &lt; this.list.length; i++) &#123; for (let j &#x3D; 0; j &lt; this.list.length - i - 1; j++) &#123; if (this.list[j + 1][name] &gt; this.list[j][name]) &#123; let tem &#x3D; this.list[j]; this.list[j] &#x3D; this.list[j + 1]; this.list[j + 1] &#x3D; tem; &#125; &#125; &#125; &#125; else if (str &#x3D;&#x3D; &quot;&lt;&quot;) &#123; for (let i &#x3D; 0; i &lt; this.list.length; i++) &#123; for (let j &#x3D; 0; j &lt; this.list.length - i - 1; j++) &#123; if (this.list[j + 1][name] &lt; this.list[j][name]) &#123; let tem &#x3D; this.list[j]; this.list[j] &#x3D; this.list[j + 1]; this.list[j + 1] &#x3D; tem; &#125; &#125; &#125; &#125; &#125; &#125;&#125;;&lt;&#x2F;script&gt;&lt;!-- 局部样式 --&gt; &lt;style scoped&gt;.list_info_i dl &#123; display: block; height: 20px; float: left; margin-right: 10px;&#125;.list_info_i dt &#123; display: block; width: 20px; height: 20px; float: left; margin-right: 2px;&#125;.list_info_i .list_info_views dt &#123; background-position: 0 -21px;&#125;.list_info_i .list_info_comment dt &#123; background-position: -25px -20px;&#125;.list_info_i .list_info_like dt &#123; background-position: -50px -21px;&#125;.list_info_i dt &#123; background: url(&quot;..&#x2F;..&#x2F;static&#x2F;images&#x2F;icons.png&quot;); background-size: 500px 500px;&#125;.list_info_i dd &#123; display: block; height: 20px; float: left; line-height: 20px; font-size: 10px; color: #a7a7a7; margin: 0;&#125;.position &#123; width: 100%; height: 50px; border-bottom: 3px solid #cccccc46; position: fixed; top: 0; left: 0; z-index: 666;&#125;&lt;&#x2F;style&gt;&lt;!-- 全局样式（框架组件） --&gt;&lt;style&gt;.van-card__title &#123; font-size: 14px;&#125;&lt;&#x2F;style&gt; 入口代码（main.js）: 12345678910111213141516171819202122232425&#x2F;&#x2F; The Vue build version to load with the &#96;import&#96; command&#x2F;&#x2F; (runtime-only or standalone) has been set in webpack.base.conf with an alias.import Vue from &#39;vue&#39;import App from &#39;.&#x2F;App&#39;import router from &#39;.&#x2F;router&#39;import &#123; DropdownMenu, DropdownItem , Button ,Card ,List ,PullRefresh,Cell&#125; from &#39;vant&#39;Vue.use(DropdownMenu) .use(DropdownItem) .use(Button) .use(Card) .use(List) .use(PullRefresh) .use(Cell);Vue.config.productionTip &#x3D; false&#x2F;* eslint-disable no-new *&#x2F;new Vue(&#123; el: &#39;#app&#39;, router, components: &#123; App &#125;, template: &#39;&lt;App&#x2F;&gt;&#39;&#125;) 注意：如果需要打包代码，执行build命令时，你会发现，css中的背景图片出不来，此时你需要修改配置文件：找到build/util.js文件中ExtractTextPlugin的css路径，手动添加publicPath参数，进行路径更改 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"面试","slug":"面试","permalink":"https://zhongqiyou.github.io/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"https://zhongqiyou.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"}]},{"title":"面试遇题1","slug":"interviewDemo","date":"2020-03-08T05:00:01.563Z","updated":"2020-03-25T16:35:57.484Z","comments":true,"path":"2020/03/08/interviewDemo/","link":"","permalink":"https://zhongqiyou.github.io/2020/03/08/interviewDemo/","excerpt":"","text":"Demo来源：上一年的二轮面试 ，面试考题 分享:本文与考题大致相同，为了页面的美观，页面采用boostrap（UI）搭建 本文涉及技术：html、css、javascript、bootstrap4、vue、jquery 效果视屏链接：https://v.youku.com/v_show/id_XNDYwMzI2Nzk3Ng==.html 接下来是源代码：html布局 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;body&gt; &lt;div id&#x3D;&quot;app&quot;&gt; &lt;div class&#x3D;&quot;container&quot;&gt; &lt;!-- 添加商品start (添加按钮)--&gt; &lt;div class&#x3D;&quot;input-margin&quot;&gt; &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; data-toggle&#x3D;&quot;modal&quot; data-target&#x3D;&quot;#exampleModal&quot;&gt; 添加商品 &lt;&#x2F;button&gt; &lt;&#x2F;div&gt; &lt;!-- Modal --&gt; &lt;div class&#x3D;&quot;modal fade&quot; id&#x3D;&quot;exampleModal&quot; tabindex&#x3D;&quot;-1&quot; role&#x3D;&quot;dialog&quot; aria-labelledby&#x3D;&quot;exampleModalLabel&quot; aria-hidden&#x3D;&quot;true&quot;&gt; &lt;div class&#x3D;&quot;modal-dialog&quot; role&#x3D;&quot;document&quot;&gt; &lt;div class&#x3D;&quot;modal-content&quot;&gt; &lt;div class&#x3D;&quot;modal-header&quot;&gt; &lt;h5 class&#x3D;&quot;modal-title&quot; id&#x3D;&quot;exampleModalLabel&quot;&gt;请输入商品名称&lt;&#x2F;h5&gt; &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;close&quot; data-dismiss&#x3D;&quot;modal&quot; aria-label&#x3D;&quot;Close&quot;&gt; &lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;times;&lt;&#x2F;span&gt; &lt;&#x2F;button&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;modal-body&quot;&gt; &lt;div class&#x3D;&quot;input-group mb-3&quot;&gt; &lt;div class&#x3D;&quot;input-group-prepend&quot;&gt; &lt;span class&#x3D;&quot;input-group-text&quot;&gt;商品名称：&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&quot;control&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;tradeName&quot;&gt; &lt;&#x2F;div&gt; &lt;p class&#x3D;&quot;red&quot; v-if&#x3D;&quot;textSwi&quot;&gt;商品名称不能为空 , 请填写&lt;&#x2F;p&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;modal-footer&quot;&gt; &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-secondary&quot; data-dismiss&#x3D;&quot;modal&quot;&gt;取消&lt;&#x2F;button&gt; &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; :data-dismiss&#x3D;&quot;modal&quot; @click&#x3D;&quot;onhidden&quot;&gt;确定&lt;&#x2F;button&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;!-- 不同商品状态查看start (单选按钮)--&gt; &lt;div class&#x3D;&quot;custom-control custom-radio inline input-margin&quot; v-for&#x3D;&quot;(value , index) in choice&quot; :key&#x3D;&quot;index&quot;&gt; &lt;input type&#x3D;&quot;radio&quot; :id&#x3D;&quot;&#39;customRadio&#39;+index&quot; :value&#x3D;&#39;value.choiceName&#39; v-model&#x3D;&quot;radioState&quot; class&#x3D;&quot;custom-control-input&quot;&gt; &lt;label class&#x3D;&quot;custom-control-label&quot; :for&#x3D;&quot;&#39;customRadio&#39;+index&quot;&gt;&#123;&#123;value.title&#125;&#125;&lt;&#x2F;label&gt; &lt;&#x2F;div&gt; &lt;!-- 不同商品数目展示start (不同复选框勾选数目)--&gt; &lt;div&gt; &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary btn-margin&quot;&gt; 全部商品 &lt;span class&#x3D;&quot;badge badge-light&quot;&gt;&#123;&#123;commodity.length&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;button&gt; &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-success btn-margin&quot;&gt; 已选商品 &lt;span class&#x3D;&quot;badge badge-light&quot;&gt;&#123;&#123;yesArr.length&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;button&gt; &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-danger btn-margin&quot;&gt; 未选商品 &lt;span class&#x3D;&quot;badge badge-light&quot;&gt;&#123;&#123;noArr.length&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;button&gt; &lt;&#x2F;div&gt; &lt;!-- 选择商品start (商品勾选)--&gt; &lt;ul class&#x3D;&quot;list-group&quot;&gt; &lt;li class&#x3D;&quot;list-group-item d-flex justify-content-between align-items-center&quot; v-for&#x3D;&quot;(value, index) in allArrSwi&quot; :key&#x3D;&quot;index&quot; @dblclick&#x3D;&quot;getEdit(index)&quot;&gt; &lt;div class&#x3D;&quot;custom-control custom-checkbox&quot;&gt; &lt;input type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;custom-control-input&quot; :id&#x3D;&quot;&#39;customCheck1&#39;+index&quot; v-model&#x3D;&quot;value.checked&quot;&gt; &lt;label class&#x3D;&quot;custom-control-label&quot; :for&#x3D;&quot;&#39;customCheck1&#39;+index&quot;&gt; &#123;&#123;value.title&#125;&#125; &lt;div class&#x3D;&quot;input-group mb-3&quot; v-show&#x3D;&quot;value.edit&quot;&gt; &lt;input type&#x3D;&quot;text&quot; @keyup.enter&#x3D;&quot;complete(index)&quot; class&#x3D;&quot;form-control&quot; ref&#x3D;&quot;title&quot; :value&#x3D;&quot;value.copy&quot; placeholder&#x3D;&quot;Username&quot;&gt; &lt;&#x2F;div&gt; &lt;&#x2F;label&gt; &lt;&#x2F;div&gt; &lt;span class&#x3D;&quot;badge badge-primary badge-pill cursor&quot; @click&#x3D;&quot;onDel(value.title)&quot;&gt;X&lt;&#x2F;span&gt; &lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt; js脚本 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697&lt;!-- bootstrap + vue --&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery@3.4.1&#x2F;dist&#x2F;jquery.slim.min.js&quot; integrity&#x3D;&quot;sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;popper.js@1.16.0&#x2F;dist&#x2F;umd&#x2F;popper.min.js&quot; integrity&#x3D;&quot;sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;bootstrap@4.4.1&#x2F;dist&#x2F;js&#x2F;bootstrap.min.js&quot; integrity&#x3D;&quot;sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.4.2&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt; var vue &#x3D; new Vue(&#123; el: &quot;#app&quot;, data() &#123; return &#123; choice: [ &#123; title: &quot;全部&quot;, choiceName: &quot;all&quot; &#125;, &#123; title: &quot;已选&quot;, choiceName: &quot;yes&quot; &#125;, &#123; title: &quot;未选&quot;, choiceName: &quot;no&quot; &#125; ], commodity: [ &#x2F;&#x2F; 定义copy为了编辑商品input中value展示(展示旧值) ，edit为了 显示&#x2F;隐藏 编辑(input) ，checked为了更好捕捉复选框勾选状态 &#123; title: &quot;小米&quot;, copy: &quot;小米&quot;, checked: false, edit: false &#125;, &#123; title: &quot;aphone&quot;, copy: &quot;aphone&quot;, checked: false, edit: false &#125;, &#123; title: &quot;魅族&quot;, copy: &quot;魅族&quot;, checked: false, edit: false &#125;, &#123; title: &quot;三星&quot;, copy: &quot;三星&quot;, checked: false, edit: false &#125;, &#123; title: &quot;诺基亚&quot;, copy: &quot;诺基亚&quot;, checked: false, edit: false &#125; ], modal: &quot;nomodal&quot;,&#x2F;&#x2F;bootstrap中的模态框 显示&#x2F;隐藏 textSwi: false,&#x2F;&#x2F;在模态框添加中 ， 如有输入错误，则显示 radioState: &quot;all&quot;,&#x2F;&#x2F;单选状态 &#125; &#125;, methods: &#123; &#x2F;&#x2F;点击事件：添加商品判断 ， 如输入错误，则文字警告，否则有效添加 onhidden() &#123; if (this.$refs.control.value &#x3D;&#x3D; &quot;&quot;) &#123; this.textSwi &#x3D; true; this.modal &#x3D; &quot;nomodal&quot;; &#125; else &#123; this.commodity.push(&#123; title: this.$refs.control.value, copy: this.$refs.control.value, checked: false, edit: false &#125;) this.modal &#x3D; &quot;modal&quot;; this.textSwi &#x3D; false; this.$refs.control.value &#x3D; &quot;&quot;; &#125; &#125;, &#x2F;&#x2F;双击事件： 编辑商品 ，展示输入框（input） getEdit(index) &#123; this.allArrSwi[index].edit &#x3D; true; this.allArrSwi[index].title &#x3D; &quot;&quot;; &#125;, &#x2F;&#x2F; 回车事件：修改商品名称 complete(index) &#123; this.allArrSwi[index].edit &#x3D; false; this.allArrSwi[index].copy &#x3D; this.$refs.title[index].value; this.allArrSwi[index].title &#x3D; this.$refs.title[index].value; &#125;, &#x2F;&#x2F; 点击事件：删除指定商品 onDel(title) &#123; let i &#x3D; -1; this.commodity.forEach((value, index) &#x3D;&gt; &#123; if (value.title &#x3D;&#x3D; title) &#123; i &#x3D; index; &#125; &#125;); this.commodity.splice(i, 1); &#125; &#125;, computed: &#123; &#x2F;&#x2F; 勾选单选不同状态 ，展示商品 allArrSwi() &#123; if (this.radioState &#x3D;&#x3D; &quot;all&quot;) &#123; return this.commodity; &#125; else if (this.radioState &#x3D;&#x3D; &quot;yes&quot;) &#123; return this.yesArr; &#125; else if (this.radioState &#x3D;&#x3D; &quot;no&quot;) &#123; return this.noArr; &#125; &#125;, &#x2F;&#x2F; 已选商品 yesArr() &#123; return this.commodity.filter((value, index) &#x3D;&gt; &#123; return value.checked &#x3D;&#x3D; true; &#125;); &#125;, &#x2F;&#x2F; 未选商品 noArr() &#123; return this.commodity.filter((value, index) &#x3D;&gt; &#123; return value.checked &#x3D;&#x3D; false; &#125;); &#125; &#125; &#125;);&lt;&#x2F;script&gt; css样式 123456789101112131415161718192021&lt;!-- bootstrap样式 --&gt; &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;bootstrap@4.4.1&#x2F;dist&#x2F;css&#x2F;bootstrap.min.css&quot; integrity&#x3D;&quot;sha384-Vkoo8x4CGsO3+Hhxv8T&#x2F;Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt; .inline &#123; display: inline-block; &#125; .input-margin &#123; margin: 10px; &#125; .btn-margin &#123; margin: 0px 10px 10px 5px; &#125; .red &#123; color: red; &#125; .cursor&#123; cursor: pointer; &#125; 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"面试","slug":"面试","permalink":"https://zhongqiyou.github.io/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"https://zhongqiyou.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"}]},{"title":"图片无缝轮播(按钮控制+自动切换+鼠标移入/移出)","slug":"wheelpanting3","date":"2020-02-23T15:49:24.239Z","updated":"2020-03-24T15:35:08.219Z","comments":true,"path":"2020/02/23/wheelpanting3/","link":"","permalink":"https://zhongqiyou.github.io/2020/02/23/wheelpanting3/","excerpt":"","text":"关于上一篇透明轮播：没有鼠标移入轮播视图时，让图片停止自动切换 与 鼠标移出轮播视图时，启动自动切换的更换功能。 无缝过渡轮播：这篇把“鼠标 移入/移出”功能补上 ，图片选自“线上京东”网图。 注意：可能会有失效图片地址。你可以选择自身图片. 样式中包含css中flex布局。如有不懂，前往学习：http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html 本文涉及技术：html、css、javascript 效果视屏链接：https://v.youku.com/v_show/id_XNDU2MDMxNDIyNA==.html 接下来是源代码：html布局 123456789101112131415161718192021222324252627282930313233343536373839&lt;body&gt; &lt;div class&#x3D;&quot;container&quot;&gt; &lt;!-- 轮播图片 --&gt; &lt;ul&gt; &lt;li&gt; &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;img20.360buyimg.com&#x2F;babel&#x2F;s590x470_jfs&#x2F;t1&#x2F;100441&#x2F;5&#x2F;12532&#x2F;101378&#x2F;5e4a3b4eE4c807442&#x2F;bf61190512946daa.jpg.webp&quot; alt&#x3D;&quot;&quot;&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;img14.360buyimg.com&#x2F;pop&#x2F;s590x470_jfs&#x2F;t1&#x2F;85986&#x2F;37&#x2F;11799&#x2F;95055&#x2F;5e3ce64bE2306ef3f&#x2F;f3314abc6248bbb7.jpg.webp&quot; alt&#x3D;&quot;&quot;&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;img13.360buyimg.com&#x2F;pop&#x2F;s590x470_jfs&#x2F;t1&#x2F;91015&#x2F;40&#x2F;10083&#x2F;87653&#x2F;5e15aa98Eea5f9113&#x2F;e3165d6363298955.jpg.webp&quot; alt&#x3D;&quot;&quot;&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;img14.360buyimg.com&#x2F;pop&#x2F;s590x470_jfs&#x2F;t1&#x2F;106727&#x2F;35&#x2F;11964&#x2F;77968&#x2F;5e44d8afEbe03f26b&#x2F;d74b87fcced1e74a.jpg.webp&quot; alt&#x3D;&quot;&quot;&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;img20.360buyimg.com&#x2F;babel&#x2F;s590x470_jfs&#x2F;t1&#x2F;100441&#x2F;5&#x2F;12532&#x2F;101378&#x2F;5e4a3b4eE4c807442&#x2F;bf61190512946daa.jpg.webp&quot; alt&#x3D;&quot;&quot;&gt; &lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;!-- 小按钮 --&gt; &lt;ol&gt; &lt;li&gt;1&lt;&#x2F;li&gt; &lt;li&gt;2&lt;&#x2F;li&gt; &lt;li&gt;3&lt;&#x2F;li&gt; &lt;li&gt;4&lt;&#x2F;li&gt; &lt;&#x2F;ol&gt; &lt;!-- 左右按钮 --&gt; &lt;div&gt; &lt;a href&#x3D;&quot;#javascript&quot;&gt;&lt;&lt;&#x2F;a&gt; &lt;a href&#x3D;&quot;#javascript&quot;&gt;&gt;&lt;&#x2F;a&gt; &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt; js脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127const totalImg &#x3D; document.querySelector(&quot;.container&gt;ul&quot;);const btnLR &#x3D; document.querySelectorAll(&quot;.container&gt;div&gt;a&quot;);const btnSmall &#x3D; document.querySelectorAll(&quot;.container&gt;ol&gt;li&quot;);const view &#x3D; document.querySelector(&quot;.container&quot;);&#x2F;&#x2F; 初始化第一个小按钮的样式btnSmall[0].classList.add(&quot;btnstyle&quot;);&#x2F;&#x2F; 获取图片单个宽度var imgWidth &#x3D; document.querySelector(&quot;.container&gt;ul&gt;li&gt;img&quot;).offsetWidth;var index &#x3D; 0;var btnIndex &#x3D; 0;var time &#x3D; null;&#x2F;&#x2F; 等待图片过渡完成开关var bool &#x3D; true;&#x2F;&#x2F; 左按钮btnLR[0].onclick &#x3D; function () &#123; if (bool) &#123; if (index &lt;&#x3D; 0) &#123; index &#x3D; 3 totalImg.style.marginLeft &#x3D; -4 * imgWidth + &quot;px&quot;; &#125; else &#123; index--; &#125; btnStyle(0, &quot;-&quot;); bool &#x3D; false; &#125;&#125;&#x2F;&#x2F; 右按钮btnLR[1].onclick &#x3D; function () &#123; if (bool) &#123; if (index &gt;&#x3D; 4) &#123; index &#x3D; 1 totalImg.style.marginLeft &#x3D; 0 + &quot;px&quot;; &#125; else &#123; index++; &#125; btnStyle(1, &quot;+&quot;); bool &#x3D; false; &#125;&#125;&#x2F;&#x2F; 单(小)按钮btnSmall.forEach((value, i) &#x3D;&gt; &#123; btnSmall[i].onclick &#x3D; function () &#123; if (bool) &#123; btnIndex &#x3D; i + 1; if (i &gt; index) &#123; index &#x3D; i; btnStyle(&quot;&quot;, &quot;+&quot;); &#125; else &#123; index &#x3D; i; btnStyle(&quot;&quot;, &quot;-&quot;); &#125; bool &#x3D; false; &#125; &#125;&#125;);&#x2F;&#x2F; 自动autoImg();&#x2F;&#x2F; 鼠标移入轮播视图取消自动view.onmouseover &#x3D; function () &#123; clearInterval(time);&#125;&#x2F;&#x2F; 鼠标移出轮播视图启动自动view.onmouseout &#x3D; function () &#123; autoImg();&#125;&#x2F;&#x2F; 自动切换封装function autoImg() &#123; time &#x3D; setInterval(() &#x3D;&gt; &#123; if (bool) &#123; if (index &gt;&#x3D; 4) &#123; index &#x3D; 1 totalImg.style.marginLeft &#x3D; 0 + &quot;px&quot;; &#125; else &#123; index++; &#125; btnStyle(1, &quot;+&quot;); bool &#x3D; false; &#125; &#125;, 2000);&#125;&#x2F;&#x2F; 图片过渡与按钮封装function btnStyle(arrIndex, str) &#123; if (arrIndex &#x3D;&#x3D; 0) &#123; btnIndex &lt;&#x3D; 0 ? btnIndex &#x3D; 3 : btnIndex--; &#125; else if (arrIndex &#x3D;&#x3D; 1) &#123; btnIndex &gt;&#x3D; 3 ? btnIndex &#x3D; 0 : btnIndex++; &#125; &#x2F;&#x2F; 小按钮样式 btnSmall.forEach((value, i) &#x3D;&gt; &#123; btnSmall[i].classList.remove(&quot;btnstyle&quot;); &#125;); btnSmall[btnIndex].classList.add(&quot;btnstyle&quot;); &#x2F;&#x2F; 图片过渡 let time &#x3D; setInterval(() &#x3D;&gt; &#123; var distance &#x3D; -(totalImg.offsetLeft); let num &#x3D; imgWidth * index; if (num &#x3D;&#x3D; distance) &#123; clearInterval(time); bool &#x3D; true; &#125; else &#123; switch (str) &#123; case &quot;-&quot;: distance &#x3D; distance - 50; break; case &quot;+&quot;: distance &#x3D; distance + 50; &#125; totalImg.style.marginLeft &#x3D; -distance + &quot;px&quot;; &#125; &#125;, 20);&#125; css样式 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273*&#123; margin: 0; padding: 0;&#125;html , body&#123; width: 100%; height: 100%;&#125;body&#123; display: flex; justify-content: center; align-items: center;&#125;.container&#123; width: 500px; height: 400px; margin: 0 auto; overflow: hidden; position: relative;&#125;.container&gt;ul&#123; list-style: none; width:2500px; width: 100%; display: flex;&#125;.container&gt;ul&gt;li&gt;img&#123; width: 500px; height: 400px;&#125;.container&gt;div&#123; top: 0; left: 0; width: 100%; height: 100%; position: absolute; display: flex; justify-content: space-between; align-items: center;&#125;.container&gt;div&gt;a&#123; font-size: 20px; text-decoration: none; color: #ffffff; background: rgba(0, 0,0, 0.5); padding: 10px;&#125;.container&gt;ol&#123; position: absolute; width: 100px; height: 15px; left: 200px; bottom: 0; display: flex; list-style: none; justify-content: space-between; z-index: 99;&#125;.container&gt;ol&gt;li&#123; width: 15%; background: #ffffff; border-radius:50% ; line-height: 15px; text-align: center; font-size: 9px; cursor: pointer;&#125;.btnstyle&#123; font-weight: bold; color: #ffffff; background: #000000 !important;&#125; 无缝轮播也有css3实现方法 ， 不过想控制轮播切换 ， 也是要js脚本。如果你要尝试css3写法时。提醒你一点：在写js控制轮播时,你必须要监听每一张图结束状态，来设定一个开关。具体怎么监听：transition也给出了对应的结束函数：transitionend。在这里就不多做介绍了。 对于轮播：无论我们学习哪一个UI框架(例如：boostrap\\vant\\element)都配有轮播，各种各样！ 最后分享一个轮播库：https://www.swiper.com.cn/ 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"轮播","slug":"轮播","permalink":"https://zhongqiyou.github.io/categories/%E8%BD%AE%E6%92%AD/"}],"tags":[{"name":"原生","slug":"原生","permalink":"https://zhongqiyou.github.io/tags/%E5%8E%9F%E7%94%9F/"}]},{"title":"透明渐变图片轮播(按钮控制 + 自动切换)","slug":"wheelpanting2","date":"2020-02-19T16:46:11.990Z","updated":"2020-03-24T15:33:22.062Z","comments":true,"path":"2020/02/20/wheelpanting2/","link":"","permalink":"https://zhongqiyou.github.io/2020/02/20/wheelpanting2/","excerpt":"","text":"透明过渡轮播：图片来自“线上京东”网图。 样式中包含css中flex布局。如有不懂，前往学习：http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html 注意：可能会有失效图片地址。你可以选择自身图片 本文涉及技术：html、css、javascript 效果视屏链接：https://v.youku.com/v_show/id_XNDU2MDI4MjgyMA==.html 接下来是源代码：html布局 1234567891011121314151617181920212223242526272829303132&lt;body&gt; &lt;ul class&#x3D;&quot;container&quot;&gt; &lt;li&gt; &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;img14.360buyimg.com&#x2F;pop&#x2F;s590x470_jfs&#x2F;t1&#x2F;85986&#x2F;37&#x2F;11799&#x2F;95055&#x2F;5e3ce64bE2306ef3f&#x2F;f3314abc6248bbb7.jpg.webp&quot; alt&#x3D;&quot;&quot; style&#x3D;&quot;opacity: 1;&quot;&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;img13.360buyimg.com&#x2F;pop&#x2F;s590x470_jfs&#x2F;t1&#x2F;91015&#x2F;40&#x2F;10083&#x2F;87653&#x2F;5e15aa98Eea5f9113&#x2F;e3165d6363298955.jpg.webp&quot; alt&#x3D;&quot;&quot;&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;img14.360buyimg.com&#x2F;pop&#x2F;s590x470_jfs&#x2F;t1&#x2F;106727&#x2F;35&#x2F;11964&#x2F;77968&#x2F;5e44d8afEbe03f26b&#x2F;d74b87fcced1e74a.jpg.webp&quot; alt&#x3D;&quot;&quot;&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;img14.360buyimg.com&#x2F;pop&#x2F;s590x470_jfs&#x2F;t1&#x2F;107724&#x2F;16&#x2F;6091&#x2F;178936&#x2F;5e475e18E55aecc6f&#x2F;597edf74bdb70a3a.jpg.webp&quot; alt&#x3D;&quot;&quot;&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;img20.360buyimg.com&#x2F;babel&#x2F;s590x470_jfs&#x2F;t1&#x2F;100441&#x2F;5&#x2F;12532&#x2F;101378&#x2F;5e4a3b4eE4c807442&#x2F;bf61190512946daa.jpg.webp&quot; alt&#x3D;&quot;&quot;&gt; &lt;&#x2F;li&gt; &lt;ol&gt; &lt;div&gt; &lt;li&gt;1&lt;&#x2F;li&gt; &lt;li&gt;2&lt;&#x2F;li&gt; &lt;li&gt;3&lt;&#x2F;li&gt; &lt;li&gt;4&lt;&#x2F;li&gt; &lt;li&gt;5&lt;&#x2F;li&gt; &lt;&#x2F;div&gt; &lt;&#x2F;ol&gt; &lt;div&gt; &lt;a href&#x3D;&quot;#javascript&quot;&gt;&lt;&lt;&#x2F;a&gt; &lt;a href&#x3D;&quot;#javascript&quot;&gt;&gt;&lt;&#x2F;a&gt; &lt;&#x2F;div&gt; &lt;&#x2F;ul&gt;&lt;&#x2F;body&gt; js脚本 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970var btnLR &#x3D; document.querySelectorAll(&quot;.container&gt;div&gt;a&quot;);var btnOTTFF &#x3D; document.querySelectorAll(&quot;.container&gt;ol&gt;div&gt;li&quot;);var img &#x3D; document.querySelectorAll(&quot;.container&gt;li&gt;img&quot;);var btnStyle &#x3D; document.querySelectorAll(&quot;.container&gt;ol&gt;div&gt;li&quot;);&#x2F;&#x2F; 初始化小按钮样式btnStyle[0].classList.add(&quot;btnstyle&quot;);var bool &#x3D; true;var index &#x3D; 0;&#x2F;&#x2F; 左右按钮切换btnLR.forEach((value, num) &#x3D;&gt; &#123; btnLR[num].onclick &#x3D; function () &#123; if(bool)&#123; if (num &#x3D;&#x3D; 0) &#123; index &lt;&#x3D; 0 ? index &#x3D; 4 : index-- &#125; else &#123; index &gt;&#x3D; 4 ? index &#x3D; 0 : index++ &#125; time(); bool &#x3D; false; &#125; &#125;&#125;);&#x2F;&#x2F; 小按钮切换btnStyle.forEach((value, num) &#x3D;&gt; &#123; btnStyle[num].onclick &#x3D; function () &#123; if (bool) &#123; index &#x3D; num; time() bool &#x3D; false; &#125; &#125;&#125;);&#x2F;&#x2F; 自动切换setInterval(() &#x3D;&gt; &#123; if(bool)&#123; index &gt;&#x3D; 4 ? index &#x3D; 0 : index++; time(); bool &#x3D; false; &#125; &#125;, 2000);function time() &#123; &#x2F;&#x2F; 初始化全部照片 img.forEach((value, i) &#x3D;&gt; &#123; img[i].style.opacity &#x3D; 0; &#125;); &#x2F;&#x2F; 透明过渡显示 let tranNum &#x3D; 0 let time &#x3D; setInterval(() &#x3D;&gt; &#123; tranNum &#x3D; tranNum + 0.1; if (tranNum &gt; 1) &#123; clearInterval(time); bool &#x3D; true; &#125; img[index].style.opacity &#x3D; tranNum; &#125;, 30); &#x2F;&#x2F; 按钮切换样式 btnStyle.forEach((value, i) &#x3D;&gt; &#123; btnStyle[i].classList.remove(&quot;btnstyle&quot;); &#125;); btnStyle[index].classList.add(&quot;btnstyle&quot;);&#125; css样式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980*&#123; margin: 0; padding: 0;&#125;html , body&#123; width: 100%; height: 100%;&#125;body&#123; display: flex; justify-content: center; align-items: center;&#125;.container&#123; width: 500px; height: 400px; list-style: none; position: relative; margin: 0 auto;&#125;.container&gt;li&#123; width: 100%; height: 100%; position: absolute;&#125;.container&gt;li&gt;img&#123; width: 100%; height: 100%; opacity: 0;&#125;.container&gt;ol&#123; width: 100px; height: 20px; position:absolute; list-style: none; bottom: 0; left: 200px; z-index: 99;&#125;.container&gt;ol&gt;div&#123; width: 100%; height: 100%; display: flex; justify-content: space-between; align-items: center;&#125;.container&gt;ol&gt;div&gt;li&#123; background: #ffffff; border-radius: 100%; width: 15%; height: 75%; font-size: 9px; line-height: 125%; text-align: center; cursor: pointer;&#125;.container&gt;div&#123; width: 100%; height: 100%; position: absolute; display: flex; justify-content: space-between; align-items: center;&#125;.container&gt;div&gt;a&#123; display: block; width: 30px; height: 30px; background:rgba(0, 0, 0, 0.5); color: #ffffff; font-size: 30px; line-height: 30px; text-decoration: none; text-align: center;&#125;.btnstyle&#123; font-weight: bold; background: #000000 !important; color: #ffffff;&#125; 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"轮播","slug":"轮播","permalink":"https://zhongqiyou.github.io/categories/%E8%BD%AE%E6%92%AD/"}],"tags":[{"name":"原生","slug":"原生","permalink":"https://zhongqiyou.github.io/tags/%E5%8E%9F%E7%94%9F/"}]},{"title":"通知轮播(无脚本)","slug":"wheelplanting","date":"2019-12-30T09:32:02.791Z","updated":"2020-03-08T05:57:55.837Z","comments":true,"path":"2019/12/30/wheelplanting/","link":"","permalink":"https://zhongqiyou.github.io/2019/12/30/wheelplanting/","excerpt":"","text":"来源：根据苏宁官网效果来编写,类似移动端文字轮播,可根据自己的想法进行图片扩展 样式中包含css中flex布局。如有不懂，前往学习：http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html 本文涉及技术：html、css 效果视屏链接：https://v.youku.com/v_show/id_XNDU2MDIzODAxMg==.html 接下来是源代码：HTML源码 123456789101112131415161718192021222324252627282930&lt;body&gt; &lt;div class&#x3D;&quot;container&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;a href&#x3D;&quot;#javasrcipt&quot;&gt;热门&lt;&#x2F;a&gt; &lt;span&gt; 我是第一个广告文本&lt;&#x2F;span&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;a href&#x3D;&quot;#javasrcipt&quot;&gt;最新&lt;&#x2F;a&gt; &lt;span&gt;我是第二个广告文本&lt;&#x2F;span&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;a href&#x3D;&quot;#javasrcipt&quot;&gt;新品&lt;&#x2F;a&gt; &lt;span&gt;我是第三个广告文本&lt;&#x2F;span&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;a href&#x3D;&quot;#javasrcipt&quot;&gt;折扣&lt;&#x2F;a&gt; &lt;span&gt;我是第四个广告文本&lt;&#x2F;span&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;a href&#x3D;&quot;#javasrcipt&quot;&gt;通知&lt;&#x2F;a&gt; &lt;span&gt;我是第五个广告文本&lt;&#x2F;span&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;a href&#x3D;&quot;#javasrcipt&quot;&gt;热门&lt;&#x2F;a&gt; &lt;span&gt; 我是第一个广告文本&lt;&#x2F;span&gt; &lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&lt;&#x2F;body&gt; css样式 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667* &#123; margin: 0; padding: 0; &#125; html , body&#123; width: 100%; height: 100%; &#125; body&#123; display: flex; justify-content: center; align-items: center; &#125; .container &#123; width: 250px; height: 30px; border-radius: 2px; border: 1px solid #000000; overflow: hidden; line-height: 30px; &#125; .container&gt;ul &#123; width: 250px; height: 150px; animation: autoFunText 8s infinite; font-size: 12px; &#125; .container&gt;ul&gt;li&gt;a&#123; background: yellow; border-radius:2px; text-decoration: none; margin: 0 5px; padding:0 5px; &#125; @keyframes autoFunText &#123; 0% &#123; margin-top: 0; &#125; 20% &#123; margin-top: -30px; &#125; 40% &#123; margin-top: -60px; &#125; 60% &#123; margin-top: -90px; &#125; 80% &#123; margin-top: -120px; &#125; 100% &#123; margin-top: -150px; &#125; &#125; .container li &#123; line-height: 30px; &#125; 以上就是本文的全部内容 ， 本文仅供参考~ 如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步… 我会及时做出更正 , 谢谢~","categories":[{"name":"轮播","slug":"轮播","permalink":"https://zhongqiyou.github.io/categories/%E8%BD%AE%E6%92%AD/"}],"tags":[{"name":"原生","slug":"原生","permalink":"https://zhongqiyou.github.io/tags/%E5%8E%9F%E7%94%9F/"}]},{"title":"自我介绍","slug":"introduce","date":"2019-12-25T08:17:31.541Z","updated":"2020-02-20T06:54:01.067Z","comments":true,"path":"2019/12/25/introduce/","link":"","permalink":"https://zhongqiyou.github.io/2019/12/25/introduce/","excerpt":"","text":"本人姓名：钟启有以后我会在我的博客这里 ， 分享一些个人代码。这些代码都是自己理解完 ， 在作编写。如有代码错误 或者 你也有自己更好的想法。可以在下方留言。我洗耳恭听，共同进步…个人详情介绍 ，可以移步到“关于”!","categories":[{"name":"个人","slug":"个人","permalink":"https://zhongqiyou.github.io/categories/%E4%B8%AA%E4%BA%BA/"}],"tags":[{"name":"自我介绍","slug":"自我介绍","permalink":"https://zhongqiyou.github.io/tags/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"}]}]}